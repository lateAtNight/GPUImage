<api>
  <package name="jp.co.cyberagent.android.gpuimage">
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="true" name="BuildConfig" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="BuildConfig" static="false" type="jp.co.cyberagent.android.gpuimage.BuildConfig" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="APPLICATION_ID" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;jp.co.cyberagent.android.gpuimage&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="BUILD_TYPE" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;release&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="DEBUG" static="true" transient="false" type="boolean" type-generic-aware="boolean" value="false" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="FLAVOR" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="VERSION_CODE" static="true" transient="false" type="int" type-generic-aware="int" value="57" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="VERSION_NAME" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;1.3.0&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImage" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImage" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImage" visibility="public">
        <parameter name="context" type="android.content.Context">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="deleteImage" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getBitmapForMultipleFilters" native="false" return="void" static="true" synchronized="false" visibility="public">
        <parameter name="bitmap" type="android.graphics.Bitmap">
        </parameter>
        <parameter name="filters" type="java.util.List&lt;jp.co.cyberagent.android.gpuimage.GPUImageFilter&gt;">
        </parameter>
        <parameter name="listener" type="jp.co.cyberagent.android.gpuimage.GPUImage.ResponseListener&lt;android.graphics.Bitmap&gt;">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getBitmapWithFilterApplied" native="false" return="android.graphics.Bitmap" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getBitmapWithFilterApplied" native="false" return="android.graphics.Bitmap" static="false" synchronized="false" visibility="public">
        <parameter name="bitmap" type="android.graphics.Bitmap">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="requestRender" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="deprecated" final="false" name="saveToPictures" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="bitmap" type="android.graphics.Bitmap">
        </parameter>
        <parameter name="folderName" type="java.lang.String">
        </parameter>
        <parameter name="fileName" type="java.lang.String">
        </parameter>
        <parameter name="listener" type="jp.co.cyberagent.android.gpuimage.GPUImage.OnPictureSavedListener">
        </parameter>
      </method>
      <method abstract="false" deprecated="deprecated" final="false" name="saveToPictures" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="folderName" type="java.lang.String">
        </parameter>
        <parameter name="fileName" type="java.lang.String">
        </parameter>
        <parameter name="listener" type="jp.co.cyberagent.android.gpuimage.GPUImage.OnPictureSavedListener">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setFilter" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="filter" type="jp.co.cyberagent.android.gpuimage.GPUImageFilter">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setGLSurfaceView" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="view" type="android.opengl.GLSurfaceView">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setImage" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="bitmap" type="android.graphics.Bitmap">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setImage" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="uri" type="android.net.Uri">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setImage" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="file" type="java.io.File">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRotation" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="rotation" type="jp.co.cyberagent.android.gpuimage.Rotation">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRotation" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="rotation" type="jp.co.cyberagent.android.gpuimage.Rotation">
        </parameter>
        <parameter name="flipHorizontal" type="boolean">
        </parameter>
        <parameter name="flipVertical" type="boolean">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setScaleType" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="scaleType" type="jp.co.cyberagent.android.gpuimage.GPUImage.ScaleType">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setUpCamera" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="camera" type="android.hardware.Camera">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setUpCamera" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="camera" type="android.hardware.Camera">
        </parameter>
        <parameter name="degrees" type="int">
        </parameter>
        <parameter name="flipHorizontal" type="boolean">
        </parameter>
        <parameter name="flipVertical" type="boolean">
        </parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImage.1" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImage.LoadImageTask" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImage.LoadImageTask" final="false" name="GPUImage.LoadImageFileTask" static="false" visibility="private">
      <constructor deprecated="not deprecated" final="false" name="GPUImage.LoadImageFileTask" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImage.LoadImageFileTask" visibility="public">
        <parameter name="gpuImage" type="jp.co.cyberagent.android.gpuimage.GPUImage">
        </parameter>
        <parameter name="file" type="java.io.File">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="decode" native="false" return="android.graphics.Bitmap" static="false" synchronized="false" visibility="protected">
        <parameter name="options" type="android.graphics.BitmapFactory.Options">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getImageOrientation" native="false" return="int" static="false" synchronized="false" visibility="protected">
        <exception name="IOException" type="java.io.IOException">
        </exception>
      </method>
    </class>
    <class abstract="true" deprecated="not deprecated" extends="android.os.AsyncTask" extends-generic-aware="android.os.AsyncTask&lt;java.lang.Void, java.lang.Void, android.graphics.Bitmap&gt;" final="false" name="GPUImage.LoadImageTask" static="false" visibility="private">
      <constructor deprecated="not deprecated" final="false" name="GPUImage.LoadImageTask" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImage.LoadImageTask" visibility="public">
        <parameter name="gpuImage" type="jp.co.cyberagent.android.gpuimage.GPUImage">
        </parameter>
      </constructor>
      <method abstract="true" deprecated="not deprecated" final="false" name="decode" native="false" return="android.graphics.Bitmap" static="false" synchronized="false" visibility="protected">
        <parameter name="p0" type="android.graphics.BitmapFactory.Options">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="doInBackground" native="false" return="android.graphics.Bitmap" static="false" synchronized="false" visibility="protected">
        <parameter name="params" type="java.lang.Void...">
        </parameter>
      </method>
      <method abstract="true" deprecated="not deprecated" final="false" name="getImageOrientation" native="false" return="int" static="false" synchronized="false" visibility="protected">
        <exception name="IOException" type="java.io.IOException">
        </exception>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onPostExecute" native="false" return="void" static="false" synchronized="false" visibility="protected">
        <parameter name="bitmap" type="android.graphics.Bitmap">
        </parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImage.LoadImageTask" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImage.LoadImageTask" final="false" name="GPUImage.LoadImageUriTask" static="false" visibility="private">
      <constructor deprecated="not deprecated" final="false" name="GPUImage.LoadImageUriTask" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImage.LoadImageUriTask" visibility="public">
        <parameter name="gpuImage" type="jp.co.cyberagent.android.gpuimage.GPUImage">
        </parameter>
        <parameter name="uri" type="android.net.Uri">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="decode" native="false" return="android.graphics.Bitmap" static="false" synchronized="false" visibility="protected">
        <parameter name="options" type="android.graphics.BitmapFactory.Options">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getImageOrientation" native="false" return="int" static="false" synchronized="false" visibility="protected">
        <exception name="IOException" type="java.io.IOException">
        </exception>
      </method>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="GPUImage.OnPictureSavedListener" static="true" visibility="public">
      <method abstract="true" deprecated="not deprecated" final="false" name="onPictureSaved" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="p0" type="android.net.Uri">
        </parameter>
      </method>
    </interface>
    <interface abstract="true" deprecated="not deprecated" final="false" name="GPUImage.ResponseListener" static="true" visibility="public">
      <typeParameters>
        <typeParameter name="T"></typeParameter>
      </typeParameters>
      <method abstract="true" deprecated="not deprecated" final="false" name="response" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="p0" type="T">
        </parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="deprecated" extends="android.os.AsyncTask" extends-generic-aware="android.os.AsyncTask&lt;java.lang.Void, java.lang.Void, java.lang.Void&gt;" final="false" name="GPUImage.SaveTask" static="false" visibility="private">
      <constructor deprecated="not deprecated" final="false" name="GPUImage.SaveTask" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImage.SaveTask" visibility="public">
        <parameter name="bitmap" type="android.graphics.Bitmap">
        </parameter>
        <parameter name="folderName" type="java.lang.String">
        </parameter>
        <parameter name="fileName" type="java.lang.String">
        </parameter>
        <parameter name="listener" type="jp.co.cyberagent.android.gpuimage.GPUImage.OnPictureSavedListener">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="doInBackground" native="false" return="java.lang.Void" static="false" synchronized="false" visibility="protected">
        <parameter name="params" type="java.lang.Void...">
        </parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImage.SaveTask.1" static="false" visibility="">
      <implements name="android.media.MediaScannerConnection.OnScanCompletedListener" name-generic-aware="android.media.MediaScannerConnection.OnScanCompletedListener">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="onScanCompleted" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="path" type="java.lang.String">
        </parameter>
        <parameter name="uri" type="android.net.Uri">
        </parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImage.SaveTask.1.1" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Enum" extends-generic-aware="java.lang.Enum&lt;jp.co.cyberagent.android.gpuimage.GPUImage.ScaleType&gt;" final="true" name="GPUImage.ScaleType" static="true" visibility="public">
      <method abstract="false" deprecated="not deprecated" final="false" name="valueOf" native="false" return="jp.co.cyberagent.android.gpuimage.GPUImage.ScaleType" static="true" synchronized="false" visibility="public">
        <parameter name="name" type="java.lang.String">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="values" native="false" return="jp.co.cyberagent.android.gpuimage.GPUImage.ScaleType[]" static="true" synchronized="false" visibility="public">
      </method>
      <field deprecated="not deprecated" final="true" name="CENTER_CROP" static="true" transient="false" type="jp.co.cyberagent.android.gpuimage.GPUImage.ScaleType" type-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImage.ScaleType" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="CENTER_INSIDE" static="true" transient="false" type="jp.co.cyberagent.android.gpuimage.GPUImage.ScaleType" type-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImage.ScaleType" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" final="false" name="GPUImage3x3ConvolutionFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImage3x3ConvolutionFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImage3x3ConvolutionFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImage3x3ConvolutionFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImage3x3ConvolutionFilter" visibility="public">
        <parameter name="convolutionKernel" type="float[]">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setConvolutionKernel" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="convolutionKernel" type="float[]">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="THREE_X_THREE_TEXTURE_SAMPLING_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision highp float;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000auniform mediump mat3 convolutionMatrix;\u000a\u000avarying vec2 textureCoordinate;\u000avarying vec2 leftTextureCoordinate;\u000avarying vec2 rightTextureCoordinate;\u000a\u000avarying vec2 topTextureCoordinate;\u000avarying vec2 topLeftTextureCoordinate;\u000avarying vec2 topRightTextureCoordinate;\u000a\u000avarying vec2 bottomTextureCoordinate;\u000avarying vec2 bottomLeftTextureCoordinate;\u000avarying vec2 bottomRightTextureCoordinate;\u000a\u000avoid main()\u000a{\u000a    mediump vec4 bottomColor = texture2D(inputImageTexture, bottomTextureCoordinate);\u000a    mediump vec4 bottomLeftColor = texture2D(inputImageTexture, bottomLeftTextureCoordinate);\u000a    mediump vec4 bottomRightColor = texture2D(inputImageTexture, bottomRightTextureCoordinate);\u000a    mediump vec4 centerColor = texture2D(inputImageTexture, textureCoordinate);\u000a    mediump vec4 leftColor = texture2D(inputImageTexture, leftTextureCoordinate);\u000a    mediump vec4 rightColor = texture2D(inputImageTexture, rightTextureCoordinate);\u000a    mediump vec4 topColor = texture2D(inputImageTexture, topTextureCoordinate);\u000a    mediump vec4 topRightColor = texture2D(inputImageTexture, topRightTextureCoordinate);\u000a    mediump vec4 topLeftColor = texture2D(inputImageTexture, topLeftTextureCoordinate);\u000a\u000a    mediump vec4 resultColor = topLeftColor * convolutionMatrix[0][0] + topColor * convolutionMatrix[0][1] + topRightColor * convolutionMatrix[0][2];\u000a    resultColor += leftColor * convolutionMatrix[1][0] + centerColor * convolutionMatrix[1][1] + rightColor * convolutionMatrix[1][2];\u000a    resultColor += bottomLeftColor * convolutionMatrix[2][0] + bottomColor * convolutionMatrix[2][1] + bottomRightColor * convolutionMatrix[2][2];\u000a\u000a    gl_FragColor = resultColor;\u000a}&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImage3x3TextureSamplingFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImage3x3TextureSamplingFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImage3x3TextureSamplingFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" visibility="public">
        <parameter name="fragmentShader" type="java.lang.String">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setLineSize" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="size" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setTexelHeight" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="texelHeight" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setTexelWidth" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="texelWidth" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="THREE_X_THREE_TEXTURE_SAMPLING_VERTEX_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;attribute vec4 position;\u000aattribute vec4 inputTextureCoordinate;\u000a\u000auniform highp float texelWidth; \u000auniform highp float texelHeight; \u000a\u000avarying vec2 textureCoordinate;\u000avarying vec2 leftTextureCoordinate;\u000avarying vec2 rightTextureCoordinate;\u000a\u000avarying vec2 topTextureCoordinate;\u000avarying vec2 topLeftTextureCoordinate;\u000avarying vec2 topRightTextureCoordinate;\u000a\u000avarying vec2 bottomTextureCoordinate;\u000avarying vec2 bottomLeftTextureCoordinate;\u000avarying vec2 bottomRightTextureCoordinate;\u000a\u000avoid main()\u000a{\u000a    gl_Position = position;\u000a\u000a    vec2 widthStep = vec2(texelWidth, 0.0);\u000a    vec2 heightStep = vec2(0.0, texelHeight);\u000a    vec2 widthHeightStep = vec2(texelWidth, texelHeight);\u000a    vec2 widthNegativeHeightStep = vec2(texelWidth, -texelHeight);\u000a\u000a    textureCoordinate = inputTextureCoordinate.xy;\u000a    leftTextureCoordinate = inputTextureCoordinate.xy - widthStep;\u000a    rightTextureCoordinate = inputTextureCoordinate.xy + widthStep;\u000a\u000a    topTextureCoordinate = inputTextureCoordinate.xy - heightStep;\u000a    topLeftTextureCoordinate = inputTextureCoordinate.xy - widthHeightStep;\u000a    topRightTextureCoordinate = inputTextureCoordinate.xy + widthNegativeHeightStep;\u000a\u000a    bottomTextureCoordinate = inputTextureCoordinate.xy + heightStep;\u000a    bottomLeftTextureCoordinate = inputTextureCoordinate.xy - widthNegativeHeightStep;\u000a    bottomRightTextureCoordinate = inputTextureCoordinate.xy + widthHeightStep;\u000a}&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageAddBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageAddBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageAddBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="ADD_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a   lowp vec4 base = texture2D(inputImageTexture, textureCoordinate);\u000a   lowp vec4 overlay = texture2D(inputImageTexture2, textureCoordinate2);\u000a\u000a   mediump float r;\u000a   if (overlay.r * base.a + base.r * overlay.a &gt;= overlay.a * base.a) {\u000a     r = overlay.a * base.a + overlay.r * (1.0 - base.a) + base.r * (1.0 - overlay.a);\u000a   } else {\u000a     r = overlay.r + base.r;\u000a   }\u000a\u000a   mediump float g;\u000a   if (overlay.g * base.a + base.g * overlay.a &gt;= overlay.a * base.a) {\u000a     g = overlay.a * base.a + overlay.g * (1.0 - base.a) + base.g * (1.0 - overlay.a);\u000a   } else {\u000a     g = overlay.g + base.g;\u000a   }\u000a\u000a   mediump float b;\u000a   if (overlay.b * base.a + base.b * overlay.a &gt;= overlay.a * base.a) {\u000a     b = overlay.a * base.a + overlay.b * (1.0 - base.a) + base.b * (1.0 - overlay.a);\u000a   } else {\u000a     b = overlay.b + base.b;\u000a   }\u000a\u000a   mediump float a = overlay.a + base.a - overlay.a * base.a;\u000a   \u000a   gl_FragColor = vec4(r, g, b, a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageMixBlendFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageMixBlendFilter" final="false" name="GPUImageAlphaBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageAlphaBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageAlphaBlendFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageAlphaBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageAlphaBlendFilter" visibility="public">
        <parameter name="mix" type="float">
        </parameter>
      </constructor>
      <field deprecated="not deprecated" final="true" name="ALPHA_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a uniform lowp float mixturePercent;\u000a\u000a void main()\u000a {\u000a   lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a   lowp vec4 textureColor2 = texture2D(inputImageTexture2, textureCoordinate2);\u000a\u000a   gl_FragColor = vec4(mix(textureColor.rgb, textureColor2.rgb, textureColor2.a * mixturePercent), textureColor.a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageBilateralFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageBilateralFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageBilateralFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageBilateralFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageBilateralFilter" visibility="public">
        <parameter name="distanceNormalizationFactor" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setDistanceNormalizationFactor" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="newValue" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="BILATERAL_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;uniform sampler2D inputImageTexture;\u000a const lowp int GAUSSIAN_SAMPLES = 9;\u000a varying highp vec2 textureCoordinate;\u000a varying highp vec2 blurCoordinates[GAUSSIAN_SAMPLES];\u000a uniform mediump float distanceNormalizationFactor;\u000a void main()\u000a {\u000a     lowp vec4 centralColor;\u000a     lowp float gaussianWeightTotal;\u000a     lowp vec4 sum;\u000a     lowp vec4 sampleColor;\u000a     lowp float distanceFromCentralColor;\u000a     lowp float gaussianWeight;\u000a     \u000a     centralColor = texture2D(inputImageTexture, blurCoordinates[4]);\u000a     gaussianWeightTotal = 0.18;\u000a     sum = centralColor * 0.18;\u000a     \u000a     sampleColor = texture2D(inputImageTexture, blurCoordinates[0]);\u000a     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\u000a     gaussianWeight = 0.05 * (1.0 - distanceFromCentralColor);\u000a     gaussianWeightTotal += gaussianWeight;\u000a     sum += sampleColor * gaussianWeight;\u000a     sampleColor = texture2D(inputImageTexture, blurCoordinates[1]);\u000a     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\u000a     gaussianWeight = 0.09 * (1.0 - distanceFromCentralColor);\u000a     gaussianWeightTotal += gaussianWeight;\u000a     sum += sampleColor * gaussianWeight;\u000a     sampleColor = texture2D(inputImageTexture, blurCoordinates[2]);\u000a     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\u000a     gaussianWeight = 0.12 * (1.0 - distanceFromCentralColor);\u000a     gaussianWeightTotal += gaussianWeight;\u000a     sum += sampleColor * gaussianWeight;\u000a     sampleColor = texture2D(inputImageTexture, blurCoordinates[3]);\u000a     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\u000a     gaussianWeight = 0.15 * (1.0 - distanceFromCentralColor);\u000a     gaussianWeightTotal += gaussianWeight;\u000a     sum += sampleColor * gaussianWeight;\u000a     sampleColor = texture2D(inputImageTexture, blurCoordinates[5]);\u000a     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\u000a     gaussianWeight = 0.15 * (1.0 - distanceFromCentralColor);\u000a     gaussianWeightTotal += gaussianWeight;\u000a     sum += sampleColor * gaussianWeight;\u000a     sampleColor = texture2D(inputImageTexture, blurCoordinates[6]);\u000a     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\u000a     gaussianWeight = 0.12 * (1.0 - distanceFromCentralColor);\u000a     gaussianWeightTotal += gaussianWeight;\u000a     sum += sampleColor * gaussianWeight;\u000a     sampleColor = texture2D(inputImageTexture, blurCoordinates[7]);\u000a     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\u000a     gaussianWeight = 0.09 * (1.0 - distanceFromCentralColor);\u000a     gaussianWeightTotal += gaussianWeight;\u000a     sum += sampleColor * gaussianWeight;\u000a     sampleColor = texture2D(inputImageTexture, blurCoordinates[8]);\u000a     distanceFromCentralColor = min(distance(centralColor, sampleColor) * distanceNormalizationFactor, 1.0);\u000a     gaussianWeight = 0.05 * (1.0 - distanceFromCentralColor);\u000a     gaussianWeightTotal += gaussianWeight;\u000a     sum += sampleColor * gaussianWeight;\u000a     gl_FragColor = sum / gaussianWeightTotal;\u000a }&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="BILATERAL_VERTEX_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;attribute vec4 position;\u000aattribute vec4 inputTextureCoordinate;\u000aconst int GAUSSIAN_SAMPLES = 9;\u000auniform vec2 singleStepOffset;\u000avarying vec2 textureCoordinate;\u000avarying vec2 blurCoordinates[GAUSSIAN_SAMPLES];\u000avoid main()\u000a{\u000a\u0009gl_Position = position;\u000a\u0009textureCoordinate = inputTextureCoordinate.xy;\u000a\u0009int multiplier = 0;\u000a\u0009vec2 blurStep;\u000a\u0009for (int i = 0; i &lt; GAUSSIAN_SAMPLES; i++)\u000a\u0009{\u000a\u0009\u0009multiplier = (i - ((GAUSSIAN_SAMPLES - 1) / 2));\u000a\u0009\u0009blurStep = float(multiplier) * singleStepOffset;\u000a\u0009\u0009blurCoordinates[i] = inputTextureCoordinate.xy + blurStep;\u000a\u0009}\u000a}&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoPassTextureSamplingFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoPassTextureSamplingFilter" final="false" name="GPUImageBoxBlurFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageBoxBlurFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageBoxBlurFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageBoxBlurFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageBoxBlurFilter" visibility="public">
        <parameter name="blurSize" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setBlurSize" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="blurSize" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision highp float;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepLeftTextureCoordinate;\u000avarying vec2 twoStepsLeftTextureCoordinate;\u000avarying vec2 oneStepRightTextureCoordinate;\u000avarying vec2 twoStepsRightTextureCoordinate;\u000a\u000avoid main()\u000a{\u000alowp vec4 fragmentColor = texture2D(inputImageTexture, centerTextureCoordinate) * 0.2;\u000afragmentColor += texture2D(inputImageTexture, oneStepLeftTextureCoordinate) * 0.2;\u000afragmentColor += texture2D(inputImageTexture, oneStepRightTextureCoordinate) * 0.2;\u000afragmentColor += texture2D(inputImageTexture, twoStepsLeftTextureCoordinate) * 0.2;\u000afragmentColor += texture2D(inputImageTexture, twoStepsRightTextureCoordinate) * 0.2;\u000a\u000agl_FragColor = fragmentColor;\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="VERTEX_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;attribute vec4 position;\u000aattribute vec2 inputTextureCoordinate;\u000a\u000auniform float texelWidthOffset; \u000auniform float texelHeightOffset; \u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepLeftTextureCoordinate;\u000avarying vec2 twoStepsLeftTextureCoordinate;\u000avarying vec2 oneStepRightTextureCoordinate;\u000avarying vec2 twoStepsRightTextureCoordinate;\u000a\u000avoid main()\u000a{\u000agl_Position = position;\u000a\u000avec2 firstOffset = vec2(1.5 * texelWidthOffset, 1.5 * texelHeightOffset);\u000avec2 secondOffset = vec2(3.5 * texelWidthOffset, 3.5 * texelHeightOffset);\u000a\u000acenterTextureCoordinate = inputTextureCoordinate;\u000aoneStepLeftTextureCoordinate = inputTextureCoordinate - firstOffset;\u000atwoStepsLeftTextureCoordinate = inputTextureCoordinate - secondOffset;\u000aoneStepRightTextureCoordinate = inputTextureCoordinate + firstOffset;\u000atwoStepsRightTextureCoordinate = inputTextureCoordinate + secondOffset;\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageBoxBlurFilter.1" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageBrightnessFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageBrightnessFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageBrightnessFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageBrightnessFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageBrightnessFilter" visibility="public">
        <parameter name="brightness" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setBrightness" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="brightness" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="BRIGHTNESS_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a \u000a uniform sampler2D inputImageTexture;\u000a uniform lowp float brightness;\u000a \u000a void main()\u000a {\u000a     lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a     \u000a     gl_FragColor = vec4((textureColor.rgb + vec3(brightness)), textureColor.w);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageBulgeDistortionFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageBulgeDistortionFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageBulgeDistortionFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageBulgeDistortionFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageBulgeDistortionFilter" visibility="public">
        <parameter name="radius" type="float">
        </parameter>
        <parameter name="scale" type="float">
        </parameter>
        <parameter name="center" type="android.graphics.PointF">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setCenter" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="center" type="android.graphics.PointF">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRadius" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="radius" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setScale" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="scale" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="BULGE_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000auniform highp float aspectRatio;\u000auniform highp vec2 center;\u000auniform highp float radius;\u000auniform highp float scale;\u000a\u000avoid main()\u000a{\u000ahighp vec2 textureCoordinateToUse = vec2(textureCoordinate.x, (textureCoordinate.y * aspectRatio + 0.5 - 0.5 * aspectRatio));\u000ahighp float dist = distance(center, textureCoordinateToUse);\u000atextureCoordinateToUse = textureCoordinate;\u000a\u000aif (dist &lt; radius)\u000a{\u000atextureCoordinateToUse -= center;\u000ahighp float percent = 1.0 - ((radius - dist) / radius) * scale;\u000apercent = percent * percent;\u000a\u000atextureCoordinateToUse = textureCoordinateToUse * percent;\u000atextureCoordinateToUse += center;\u000a}\u000a\u000agl_FragColor = texture2D(inputImageTexture, textureCoordinateToUse );    \u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageCGAColorspaceFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageCGAColorspaceFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageCGAColorspaceFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="CGACOLORSPACE_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avoid main()\u000a{\u000ahighp vec2 sampleDivisor = vec2(1.0 / 200.0, 1.0 / 320.0);\u000a//highp vec4 colorDivisor = vec4(colorDepth);\u000a\u000ahighp vec2 samplePos = textureCoordinate - mod(textureCoordinate, sampleDivisor);\u000ahighp vec4 color = texture2D(inputImageTexture, samplePos );\u000a\u000a//gl_FragColor = texture2D(inputImageTexture, samplePos );\u000amediump vec4 colorCyan = vec4(85.0 / 255.0, 1.0, 1.0, 1.0);\u000amediump vec4 colorMagenta = vec4(1.0, 85.0 / 255.0, 1.0, 1.0);\u000amediump vec4 colorWhite = vec4(1.0, 1.0, 1.0, 1.0);\u000amediump vec4 colorBlack = vec4(0.0, 0.0, 0.0, 1.0);\u000a\u000amediump vec4 endColor;\u000ahighp float blackDistance = distance(color, colorBlack);\u000ahighp float whiteDistance = distance(color, colorWhite);\u000ahighp float magentaDistance = distance(color, colorMagenta);\u000ahighp float cyanDistance = distance(color, colorCyan);\u000a\u000amediump vec4 finalColor;\u000a\u000ahighp float colorDistance = min(magentaDistance, cyanDistance);\u000acolorDistance = min(colorDistance, whiteDistance);\u000acolorDistance = min(colorDistance, blackDistance); \u000a\u000aif (colorDistance == blackDistance) {\u000afinalColor = colorBlack;\u000a} else if (colorDistance == whiteDistance) {\u000afinalColor = colorWhite;\u000a} else if (colorDistance == cyanDistance) {\u000afinalColor = colorCyan;\u000a} else {\u000afinalColor = colorMagenta;\u000a}\u000a\u000agl_FragColor = finalColor;\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageChromaKeyBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageChromaKeyBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageChromaKeyBlendFilter" visibility="public">
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setColorToReplace" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="redComponent" type="float">
        </parameter>
        <parameter name="greenComponent" type="float">
        </parameter>
        <parameter name="blueComponent" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setSmoothing" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="smoothing" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setThresholdSensitivity" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="thresholdSensitivity" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="CHROMA_KEY_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot; precision highp float;\u000a \u000a varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform float thresholdSensitivity;\u000a uniform float smoothing;\u000a uniform vec3 colorToReplace;\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a     vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a     vec4 textureColor2 = texture2D(inputImageTexture2, textureCoordinate2);\u000a     \u000a     float maskY = 0.2989 * colorToReplace.r + 0.5866 * colorToReplace.g + 0.1145 * colorToReplace.b;\u000a     float maskCr = 0.7132 * (colorToReplace.r - maskY);\u000a     float maskCb = 0.5647 * (colorToReplace.b - maskY);\u000a     \u000a     float Y = 0.2989 * textureColor.r + 0.5866 * textureColor.g + 0.1145 * textureColor.b;\u000a     float Cr = 0.7132 * (textureColor.r - Y);\u000a     float Cb = 0.5647 * (textureColor.b - Y);\u000a     \u000a     float blendValue = 1.0 - smoothstep(thresholdSensitivity, thresholdSensitivity + smoothing, distance(vec2(Cr, Cb), vec2(maskCr, maskCb)));\u000a     gl_FragColor = mix(textureColor, textureColor2, blendValue);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageColorBalanceFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageColorBalanceFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageColorBalanceFilter" visibility="public">
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setHighlights" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="highlights" type="float[]">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setMidtones" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="midtones" type="float[]">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setPreserveLuminosity" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="preserveLuminosity" type="boolean">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setShowdows" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="showdows" type="float[]">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="GPU_IMAGE_COLOR_BALANCE_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000auniform sampler2D inputImageTexture;\u000auniform lowp vec3 shadowsShift;\u000auniform lowp vec3 midtonesShift;\u000auniform lowp vec3 highlightsShift;\u000auniform int preserveLuminosity;\u000alowp vec3 RGBToHSL(lowp vec3 color)\u000a{\u000alowp vec3 hsl; // init to 0 to avoid warnings ? (and reverse if + remove first part)\u000alowp float fmin = min(min(color.r, color.g), color.b);    //Min. value of RGB\u000alowp float fmax = max(max(color.r, color.g), color.b);    //Max. value of RGB\u000alowp float delta = fmax - fmin;             //Delta RGB value\u000ahsl.z = (fmax + fmin) / 2.0; // Luminance\u000aif (delta == 0.0)\u0009\u0009//This is a gray, no chroma...\u000a{\u000a    hsl.x = 0.0;\u0009// Hue\u000a    hsl.y = 0.0;\u0009// Saturation\u000a}\u000aelse                                    //Chromatic data...\u000a{\u000a    if (hsl.z &lt; 0.5)\u000a        hsl.y = delta / (fmax + fmin); // Saturation\u000a    else\u000a        hsl.y = delta / (2.0 - fmax - fmin); // Saturation\u000a\u000a    lowp float deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;\u000a    lowp float deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;\u000a    lowp float deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;\u000a\u000a    if (color.r == fmax )\u000a        hsl.x = deltaB - deltaG; // Hue\u000a    else if (color.g == fmax)\u000a        hsl.x = (1.0 / 3.0) + deltaR - deltaB; // Hue\u000a    else if (color.b == fmax)\u000a        hsl.x = (2.0 / 3.0) + deltaG - deltaR; // Hue\u000a    if (hsl.x &lt; 0.0)\u000a        hsl.x += 1.0; // Hue\u000a    else if (hsl.x &gt; 1.0)\u000a        hsl.x -= 1.0; // Hue\u000a}\u000a\u000areturn hsl;\u000a}\u000alowp float HueToRGB(lowp float f1, lowp float f2, lowp float hue)\u000a{\u000a    if (hue &lt; 0.0)\u000a        hue += 1.0;\u000a    else if (hue &gt; 1.0)\u000a        hue -= 1.0;\u000a    lowp float res;\u000a    if ((6.0 * hue) &lt; 1.0)\u000a        res = f1 + (f2 - f1) * 6.0 * hue;\u000a    else if ((2.0 * hue) &lt; 1.0)\u000a        res = f2;\u000a    else if ((3.0 * hue) &lt; 2.0)\u000a        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\u000a    else\u000a        res = f1;\u000a    return res;\u000a}\u000alowp vec3 HSLToRGB(lowp vec3 hsl)\u000a{\u000a    lowp vec3 rgb;\u000a    if (hsl.y == 0.0)\u000a        rgb = vec3(hsl.z); // Luminance\u000a    else\u000a    {\u000a        lowp float f2;\u000a        if (hsl.z &lt; 0.5)\u000a            f2 = hsl.z * (1.0 + hsl.y);\u000a        else\u000a            f2 = (hsl.z + hsl.y) - (hsl.y * hsl.z);\u000a        lowp float f1 = 2.0 * hsl.z - f2;\u000a        rgb.r = HueToRGB(f1, f2, hsl.x + (1.0/3.0));\u000a        rgb.g = HueToRGB(f1, f2, hsl.x);\u000a        rgb.b= HueToRGB(f1, f2, hsl.x - (1.0/3.0));\u000a    }\u000a    return rgb;\u000a  }\u000alowp float RGBToL(lowp vec3 color)\u000a{\u000a    lowp float fmin = min(min(color.r, color.g), color.b);    //Min. value of RGB\u000a    lowp float fmax = max(max(color.r, color.g), color.b);    //Max. value of RGB\u000a    return (fmax + fmin) / 2.0; // Luminance\u000a}\u000avoid main()\u000a{\u000a    lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a    // Alternative way:\u000a    //lowp vec3 lightness = RGBToL(textureColor.rgb);\u000a    lowp vec3 lightness = textureColor.rgb;\u000a    const lowp float a = 0.25;\u000a    const lowp float b = 0.333;\u000a    const lowp float scale = 0.7;\u000a    lowp vec3 shadows = shadowsShift * (clamp((lightness - b) / -a + 0.5, 0.0, 1.0) * scale);\u000a    lowp vec3 midtones = midtonesShift * (clamp((lightness - b) / a + 0.5, 0.0, 1.0) *\u000a        clamp((lightness + b - 1.0) / -a + 0.5, 0.0, 1.0) * scale);\u000a    lowp vec3 highlights = highlightsShift * (clamp((lightness + b - 1.0) / a + 0.5, 0.0, 1.0) * scale);\u000a    mediump vec3 newColor = textureColor.rgb + shadows + midtones + highlights;\u000a    newColor = clamp(newColor, 0.0, 1.0);\u000a        if (preserveLuminosity != 0) {\u000a           lowp vec3 newHSL = RGBToHSL(newColor);\u000a        lowp float oldLum = RGBToL(textureColor.rgb);\u000a        textureColor.rgb = HSLToRGB(vec3(newHSL.x, newHSL.y, oldLum));\u000a        gl_FragColor = textureColor;\u000a    } else {\u000a        gl_FragColor = vec4(newColor.rgb, textureColor.w);\u000a    }\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageColorBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageColorBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageColorBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="COLOR_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a \u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a highp float lum(lowp vec3 c) {\u000a     return dot(c, vec3(0.3, 0.59, 0.11));\u000a }\u000a \u000a lowp vec3 clipcolor(lowp vec3 c) {\u000a     highp float l = lum(c);\u000a     lowp float n = min(min(c.r, c.g), c.b);\u000a     lowp float x = max(max(c.r, c.g), c.b);\u000a     \u000a     if (n &lt; 0.0) {\u000a         c.r = l + ((c.r - l) * l) / (l - n);\u000a         c.g = l + ((c.g - l) * l) / (l - n);\u000a         c.b = l + ((c.b - l) * l) / (l - n);\u000a     }\u000a     if (x &gt; 1.0) {\u000a         c.r = l + ((c.r - l) * (1.0 - l)) / (x - l);\u000a         c.g = l + ((c.g - l) * (1.0 - l)) / (x - l);\u000a         c.b = l + ((c.b - l) * (1.0 - l)) / (x - l);\u000a     }\u000a     \u000a     return c;\u000a }\u000a\u000a lowp vec3 setlum(lowp vec3 c, highp float l) {\u000a     highp float d = l - lum(c);\u000a     c = c + vec3(d);\u000a     return clipcolor(c);\u000a }\u000a \u000a void main()\u000a {\u000a   highp vec4 baseColor = texture2D(inputImageTexture, textureCoordinate);\u000a   highp vec4 overlayColor = texture2D(inputImageTexture2, textureCoordinate2);\u000a\u000a     gl_FragColor = vec4(baseColor.rgb * (1.0 - overlayColor.a) + setlum(overlayColor.rgb, lum(baseColor.rgb)) * overlayColor.a, baseColor.a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageColorBurnBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageColorBurnBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageColorBurnBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="COLOR_BURN_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a    mediump vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a    mediump vec4 textureColor2 = texture2D(inputImageTexture2, textureCoordinate2);\u000a    mediump vec4 whiteColor = vec4(1.0);\u000a    gl_FragColor = whiteColor - (whiteColor - textureColor) / textureColor2;\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageColorDodgeBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageColorDodgeBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageColorDodgeBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="COLOR_DODGE_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision mediump float;\u000a \u000a varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a \u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a     vec4 base = texture2D(inputImageTexture, textureCoordinate);\u000a     vec4 overlay = texture2D(inputImageTexture2, textureCoordinate2);\u000a     \u000a     vec3 baseOverlayAlphaProduct = vec3(overlay.a * base.a);\u000a     vec3 rightHandProduct = overlay.rgb * (1.0 - base.a) + base.rgb * (1.0 - overlay.a);\u000a     \u000a     vec3 firstBlendColor = baseOverlayAlphaProduct + rightHandProduct;\u000a     vec3 overlayRGB = clamp((overlay.rgb / clamp(overlay.a, 0.01, 1.0)) * step(0.0, overlay.a), 0.0, 0.99);\u000a     \u000a     vec3 secondBlendColor = (base.rgb * overlay.a) / (1.0 - overlayRGB) + rightHandProduct;\u000a     \u000a     vec3 colorChoice = step((overlay.rgb * base.a + base.rgb * overlay.a), baseOverlayAlphaProduct);\u000a     \u000a     gl_FragColor = vec4(mix(firstBlendColor, secondBlendColor, colorChoice), 1.0);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageColorInvertFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageColorInvertFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageColorInvertFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="COLOR_INVERT_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avoid main()\u000a{\u000a    lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a    \u000a    gl_FragColor = vec4((1.0 - textureColor.rgb), textureColor.w);\u000a}&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageColorMatrixFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageColorMatrixFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageColorMatrixFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageColorMatrixFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageColorMatrixFilter" visibility="public">
        <parameter name="intensity" type="float">
        </parameter>
        <parameter name="colorMatrix" type="float[]">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setColorMatrix" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="colorMatrix" type="float[]">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setIntensity" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="intensity" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="COLOR_MATRIX_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000auniform lowp mat4 colorMatrix;\u000auniform lowp float intensity;\u000a\u000avoid main()\u000a{\u000a    lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a    lowp vec4 outputColor = textureColor * colorMatrix;\u000a    \u000a    gl_FragColor = (intensity * outputColor) + ((1.0 - intensity) * textureColor);\u000a}&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageContrastFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageContrastFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageContrastFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageContrastFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageContrastFilter" visibility="public">
        <parameter name="contrast" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setContrast" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="contrast" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="CONTRAST_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a \u000a uniform sampler2D inputImageTexture;\u000a uniform lowp float contrast;\u000a \u000a void main()\u000a {\u000a     lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a     \u000a     gl_FragColor = vec4(((textureColor.rgb - vec3(0.5)) * contrast + vec3(0.5)), textureColor.w);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageCrosshatchFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageCrosshatchFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageCrosshatchFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageCrosshatchFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageCrosshatchFilter" visibility="public">
        <parameter name="crossHatchSpacing" type="float">
        </parameter>
        <parameter name="lineWidth" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setCrossHatchSpacing" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="crossHatchSpacing" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setLineWidth" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="lineWidth" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="CROSSHATCH_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000auniform sampler2D inputImageTexture;\u000auniform highp float crossHatchSpacing;\u000auniform highp float lineWidth;\u000aconst highp vec3 W = vec3(0.2125, 0.7154, 0.0721);\u000avoid main()\u000a{\u000ahighp float luminance = dot(texture2D(inputImageTexture, textureCoordinate).rgb, W);\u000alowp vec4 colorToDisplay = vec4(1.0, 1.0, 1.0, 1.0);\u000aif (luminance &lt; 1.00)\u000a{\u000aif (mod(textureCoordinate.x + textureCoordinate.y, crossHatchSpacing) &lt;= lineWidth)\u000a{\u000acolorToDisplay = vec4(0.0, 0.0, 0.0, 1.0);\u000a}\u000a}\u000aif (luminance &lt; 0.75)\u000a{\u000aif (mod(textureCoordinate.x - textureCoordinate.y, crossHatchSpacing) &lt;= lineWidth)\u000a{\u000acolorToDisplay = vec4(0.0, 0.0, 0.0, 1.0);\u000a}\u000a}\u000aif (luminance &lt; 0.50)\u000a{\u000aif (mod(textureCoordinate.x + textureCoordinate.y - (crossHatchSpacing / 2.0), crossHatchSpacing) &lt;= lineWidth)\u000a{\u000acolorToDisplay = vec4(0.0, 0.0, 0.0, 1.0);\u000a}\u000a}\u000aif (luminance &lt; 0.3)\u000a{\u000aif (mod(textureCoordinate.x - textureCoordinate.y - (crossHatchSpacing / 2.0), crossHatchSpacing) &lt;= lineWidth)\u000a{\u000acolorToDisplay = vec4(0.0, 0.0, 0.0, 1.0);\u000a}\u000a}\u000agl_FragColor = colorToDisplay;\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageDarkenBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageDarkenBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageDarkenBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="DARKEN_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a    lowp vec4 base = texture2D(inputImageTexture, textureCoordinate);\u000a    lowp vec4 overlayer = texture2D(inputImageTexture2, textureCoordinate2);\u000a    \u000a    gl_FragColor = vec4(min(overlayer.rgb * base.a, base.rgb * overlayer.a) + overlayer.rgb * (1.0 - base.a) + base.rgb * (1.0 - overlayer.a), 1.0);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageDifferenceBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageDifferenceBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageDifferenceBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="DIFFERENCE_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a     mediump vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a     mediump vec4 textureColor2 = texture2D(inputImageTexture2, textureCoordinate2);\u000a     gl_FragColor = vec4(abs(textureColor2.rgb - textureColor.rgb), textureColor.a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoPassTextureSamplingFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoPassTextureSamplingFilter" final="false" name="GPUImageDilationFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageDilationFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageDilationFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageDilationFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageDilationFilter" visibility="public">
        <parameter name="radius" type="int">
        </parameter>
      </constructor>
      <field deprecated="not deprecated" final="true" name="FRAGMENT_SHADER_1" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision lowp float;\u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avoid main()\u000a{\u000afloat centerIntensity = texture2D(inputImageTexture, centerTextureCoordinate).r;\u000afloat oneStepPositiveIntensity = texture2D(inputImageTexture, oneStepPositiveTextureCoordinate).r;\u000afloat oneStepNegativeIntensity = texture2D(inputImageTexture, oneStepNegativeTextureCoordinate).r;\u000a\u000alowp float maxValue = max(centerIntensity, oneStepPositiveIntensity);\u000amaxValue = max(maxValue, oneStepNegativeIntensity);\u000a\u000agl_FragColor = vec4(vec3(maxValue), 1.0);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="FRAGMENT_SHADER_2" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision lowp float;\u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000avarying vec2 twoStepsPositiveTextureCoordinate;\u000avarying vec2 twoStepsNegativeTextureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avoid main()\u000a{\u000afloat centerIntensity = texture2D(inputImageTexture, centerTextureCoordinate).r;\u000afloat oneStepPositiveIntensity = texture2D(inputImageTexture, oneStepPositiveTextureCoordinate).r;\u000afloat oneStepNegativeIntensity = texture2D(inputImageTexture, oneStepNegativeTextureCoordinate).r;\u000afloat twoStepsPositiveIntensity = texture2D(inputImageTexture, twoStepsPositiveTextureCoordinate).r;\u000afloat twoStepsNegativeIntensity = texture2D(inputImageTexture, twoStepsNegativeTextureCoordinate).r;\u000a\u000alowp float maxValue = max(centerIntensity, oneStepPositiveIntensity);\u000amaxValue = max(maxValue, oneStepNegativeIntensity);\u000amaxValue = max(maxValue, twoStepsPositiveIntensity);\u000amaxValue = max(maxValue, twoStepsNegativeIntensity);\u000a\u000agl_FragColor = vec4(vec3(maxValue), 1.0);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="FRAGMENT_SHADER_3" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision lowp float;\u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000avarying vec2 twoStepsPositiveTextureCoordinate;\u000avarying vec2 twoStepsNegativeTextureCoordinate;\u000avarying vec2 threeStepsPositiveTextureCoordinate;\u000avarying vec2 threeStepsNegativeTextureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avoid main()\u000a{\u000afloat centerIntensity = texture2D(inputImageTexture, centerTextureCoordinate).r;\u000afloat oneStepPositiveIntensity = texture2D(inputImageTexture, oneStepPositiveTextureCoordinate).r;\u000afloat oneStepNegativeIntensity = texture2D(inputImageTexture, oneStepNegativeTextureCoordinate).r;\u000afloat twoStepsPositiveIntensity = texture2D(inputImageTexture, twoStepsPositiveTextureCoordinate).r;\u000afloat twoStepsNegativeIntensity = texture2D(inputImageTexture, twoStepsNegativeTextureCoordinate).r;\u000afloat threeStepsPositiveIntensity = texture2D(inputImageTexture, threeStepsPositiveTextureCoordinate).r;\u000afloat threeStepsNegativeIntensity = texture2D(inputImageTexture, threeStepsNegativeTextureCoordinate).r;\u000a\u000alowp float maxValue = max(centerIntensity, oneStepPositiveIntensity);\u000amaxValue = max(maxValue, oneStepNegativeIntensity);\u000amaxValue = max(maxValue, twoStepsPositiveIntensity);\u000amaxValue = max(maxValue, twoStepsNegativeIntensity);\u000amaxValue = max(maxValue, threeStepsPositiveIntensity);\u000amaxValue = max(maxValue, threeStepsNegativeIntensity);\u000a\u000agl_FragColor = vec4(vec3(maxValue), 1.0);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="FRAGMENT_SHADER_4" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision lowp float;\u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000avarying vec2 twoStepsPositiveTextureCoordinate;\u000avarying vec2 twoStepsNegativeTextureCoordinate;\u000avarying vec2 threeStepsPositiveTextureCoordinate;\u000avarying vec2 threeStepsNegativeTextureCoordinate;\u000avarying vec2 fourStepsPositiveTextureCoordinate;\u000avarying vec2 fourStepsNegativeTextureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avoid main()\u000a{\u000afloat centerIntensity = texture2D(inputImageTexture, centerTextureCoordinate).r;\u000afloat oneStepPositiveIntensity = texture2D(inputImageTexture, oneStepPositiveTextureCoordinate).r;\u000afloat oneStepNegativeIntensity = texture2D(inputImageTexture, oneStepNegativeTextureCoordinate).r;\u000afloat twoStepsPositiveIntensity = texture2D(inputImageTexture, twoStepsPositiveTextureCoordinate).r;\u000afloat twoStepsNegativeIntensity = texture2D(inputImageTexture, twoStepsNegativeTextureCoordinate).r;\u000afloat threeStepsPositiveIntensity = texture2D(inputImageTexture, threeStepsPositiveTextureCoordinate).r;\u000afloat threeStepsNegativeIntensity = texture2D(inputImageTexture, threeStepsNegativeTextureCoordinate).r;\u000afloat fourStepsPositiveIntensity = texture2D(inputImageTexture, fourStepsPositiveTextureCoordinate).r;\u000afloat fourStepsNegativeIntensity = texture2D(inputImageTexture, fourStepsNegativeTextureCoordinate).r;\u000a\u000alowp float maxValue = max(centerIntensity, oneStepPositiveIntensity);\u000amaxValue = max(maxValue, oneStepNegativeIntensity);\u000amaxValue = max(maxValue, twoStepsPositiveIntensity);\u000amaxValue = max(maxValue, twoStepsNegativeIntensity);\u000amaxValue = max(maxValue, threeStepsPositiveIntensity);\u000amaxValue = max(maxValue, threeStepsNegativeIntensity);\u000amaxValue = max(maxValue, fourStepsPositiveIntensity);\u000amaxValue = max(maxValue, fourStepsNegativeIntensity);\u000a\u000agl_FragColor = vec4(vec3(maxValue), 1.0);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="VERTEX_SHADER_1" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;attribute vec4 position;\u000aattribute vec2 inputTextureCoordinate;\u000a\u000auniform float texelWidthOffset; \u000auniform float texelHeightOffset; \u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000a\u000avoid main()\u000a{\u000agl_Position = position;\u000a\u000avec2 offset = vec2(texelWidthOffset, texelHeightOffset);\u000a\u000acenterTextureCoordinate = inputTextureCoordinate;\u000aoneStepNegativeTextureCoordinate = inputTextureCoordinate - offset;\u000aoneStepPositiveTextureCoordinate = inputTextureCoordinate + offset;\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="VERTEX_SHADER_2" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;attribute vec4 position;\u000aattribute vec2 inputTextureCoordinate;\u000a\u000auniform float texelWidthOffset;\u000auniform float texelHeightOffset;\u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000avarying vec2 twoStepsPositiveTextureCoordinate;\u000avarying vec2 twoStepsNegativeTextureCoordinate;\u000a\u000avoid main()\u000a{\u000agl_Position = position;\u000a\u000avec2 offset = vec2(texelWidthOffset, texelHeightOffset);\u000a\u000acenterTextureCoordinate = inputTextureCoordinate;\u000aoneStepNegativeTextureCoordinate = inputTextureCoordinate - offset;\u000aoneStepPositiveTextureCoordinate = inputTextureCoordinate + offset;\u000atwoStepsNegativeTextureCoordinate = inputTextureCoordinate - (offset * 2.0);\u000atwoStepsPositiveTextureCoordinate = inputTextureCoordinate + (offset * 2.0);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="VERTEX_SHADER_3" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;attribute vec4 position;\u000aattribute vec2 inputTextureCoordinate;\u000a\u000auniform float texelWidthOffset;\u000auniform float texelHeightOffset;\u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000avarying vec2 twoStepsPositiveTextureCoordinate;\u000avarying vec2 twoStepsNegativeTextureCoordinate;\u000avarying vec2 threeStepsPositiveTextureCoordinate;\u000avarying vec2 threeStepsNegativeTextureCoordinate;\u000a\u000avoid main()\u000a{\u000agl_Position = position;\u000a\u000avec2 offset = vec2(texelWidthOffset, texelHeightOffset);\u000a\u000acenterTextureCoordinate = inputTextureCoordinate;\u000aoneStepNegativeTextureCoordinate = inputTextureCoordinate - offset;\u000aoneStepPositiveTextureCoordinate = inputTextureCoordinate + offset;\u000atwoStepsNegativeTextureCoordinate = inputTextureCoordinate - (offset * 2.0);\u000atwoStepsPositiveTextureCoordinate = inputTextureCoordinate + (offset * 2.0);\u000athreeStepsNegativeTextureCoordinate = inputTextureCoordinate - (offset * 3.0);\u000athreeStepsPositiveTextureCoordinate = inputTextureCoordinate + (offset * 3.0);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="VERTEX_SHADER_4" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;attribute vec4 position;\u000aattribute vec2 inputTextureCoordinate;\u000a\u000auniform float texelWidthOffset;\u000auniform float texelHeightOffset;\u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000avarying vec2 twoStepsPositiveTextureCoordinate;\u000avarying vec2 twoStepsNegativeTextureCoordinate;\u000avarying vec2 threeStepsPositiveTextureCoordinate;\u000avarying vec2 threeStepsNegativeTextureCoordinate;\u000avarying vec2 fourStepsPositiveTextureCoordinate;\u000avarying vec2 fourStepsNegativeTextureCoordinate;\u000a\u000avoid main()\u000a{\u000agl_Position = position;\u000a\u000avec2 offset = vec2(texelWidthOffset, texelHeightOffset);\u000a\u000acenterTextureCoordinate = inputTextureCoordinate;\u000aoneStepNegativeTextureCoordinate = inputTextureCoordinate - offset;\u000aoneStepPositiveTextureCoordinate = inputTextureCoordinate + offset;\u000atwoStepsNegativeTextureCoordinate = inputTextureCoordinate - (offset * 2.0);\u000atwoStepsPositiveTextureCoordinate = inputTextureCoordinate + (offset * 2.0);\u000athreeStepsNegativeTextureCoordinate = inputTextureCoordinate - (offset * 3.0);\u000athreeStepsPositiveTextureCoordinate = inputTextureCoordinate + (offset * 3.0);\u000afourStepsNegativeTextureCoordinate = inputTextureCoordinate - (offset * 4.0);\u000afourStepsPositiveTextureCoordinate = inputTextureCoordinate + (offset * 4.0);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" final="false" name="GPUImageDirectionalSobelEdgeDetectionFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageDirectionalSobelEdgeDetectionFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageDirectionalSobelEdgeDetectionFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="DIRECTIONAL_SOBEL_EDGE_DETECTION_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision mediump float;\u000a\u000avarying vec2 textureCoordinate;\u000avarying vec2 leftTextureCoordinate;\u000avarying vec2 rightTextureCoordinate;\u000a\u000avarying vec2 topTextureCoordinate;\u000avarying vec2 topLeftTextureCoordinate;\u000avarying vec2 topRightTextureCoordinate;\u000a\u000avarying vec2 bottomTextureCoordinate;\u000avarying vec2 bottomLeftTextureCoordinate;\u000avarying vec2 bottomRightTextureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avoid main()\u000a{\u000a    float bottomLeftIntensity = texture2D(inputImageTexture, bottomLeftTextureCoordinate).r;\u000a    float topRightIntensity = texture2D(inputImageTexture, topRightTextureCoordinate).r;\u000a    float topLeftIntensity = texture2D(inputImageTexture, topLeftTextureCoordinate).r;\u000a    float bottomRightIntensity = texture2D(inputImageTexture, bottomRightTextureCoordinate).r;\u000a    float leftIntensity = texture2D(inputImageTexture, leftTextureCoordinate).r;\u000a    float rightIntensity = texture2D(inputImageTexture, rightTextureCoordinate).r;\u000a    float bottomIntensity = texture2D(inputImageTexture, bottomTextureCoordinate).r;\u000a    float topIntensity = texture2D(inputImageTexture, topTextureCoordinate).r;\u000a\u000a    vec2 gradientDirection;\u000a    gradientDirection.x = -bottomLeftIntensity - 2.0 * leftIntensity - topLeftIntensity + bottomRightIntensity + 2.0 * rightIntensity + topRightIntensity;\u000a    gradientDirection.y = -topLeftIntensity - 2.0 * topIntensity - topRightIntensity + bottomLeftIntensity + 2.0 * bottomIntensity + bottomRightIntensity;\u000a\u000a    float gradientMagnitude = length(gradientDirection);\u000a    vec2 normalizedDirection = normalize(gradientDirection);\u000a    normalizedDirection = sign(normalizedDirection) * floor(abs(normalizedDirection) + 0.617316); // Offset by 1-sin(pi/8) to set to 0 if near axis, 1 if away\u000a    normalizedDirection = (normalizedDirection + 1.0) * 0.5; // Place -1.0 - 1.0 within 0 - 1.0\u000a\u000a    gl_FragColor = vec4(gradientMagnitude, normalizedDirection.x, normalizedDirection.y, 1.0);\u000a}&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageMixBlendFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageMixBlendFilter" final="false" name="GPUImageDissolveBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageDissolveBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageDissolveBlendFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageDissolveBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageDissolveBlendFilter" visibility="public">
        <parameter name="mix" type="float">
        </parameter>
      </constructor>
      <field deprecated="not deprecated" final="true" name="DISSOLVE_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a uniform lowp float mixturePercent;\u000a \u000a void main()\u000a {\u000a    lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a    lowp vec4 textureColor2 = texture2D(inputImageTexture2, textureCoordinate2);\u000a    \u000a    gl_FragColor = mix(textureColor, textureColor2, mixturePercent);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageDivideBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageDivideBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageDivideBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="DIVIDE_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a   mediump vec4 base = texture2D(inputImageTexture, textureCoordinate);\u000a   mediump vec4 overlay = texture2D(inputImageTexture2, textureCoordinate2);\u000a   \u000a   mediump float ra;\u000a   if (overlay.a == 0.0 || ((base.r / overlay.r) &gt; (base.a / overlay.a)))\u000a     ra = overlay.a * base.a + overlay.r * (1.0 - base.a) + base.r * (1.0 - overlay.a);\u000a   else\u000a     ra = (base.r * overlay.a * overlay.a) / overlay.r + overlay.r * (1.0 - base.a) + base.r * (1.0 - overlay.a);\u000a   \u000a\u000a   mediump float ga;\u000a   if (overlay.a == 0.0 || ((base.g / overlay.g) &gt; (base.a / overlay.a)))\u000a     ga = overlay.a * base.a + overlay.g * (1.0 - base.a) + base.g * (1.0 - overlay.a);\u000a   else\u000a     ga = (base.g * overlay.a * overlay.a) / overlay.g + overlay.g * (1.0 - base.a) + base.g * (1.0 - overlay.a);\u000a\u000a   \u000a   mediump float ba;\u000a   if (overlay.a == 0.0 || ((base.b / overlay.b) &gt; (base.a / overlay.a)))\u000a     ba = overlay.a * base.a + overlay.b * (1.0 - base.a) + base.b * (1.0 - overlay.a);\u000a   else\u000a     ba = (base.b * overlay.a * overlay.a) / overlay.b + overlay.b * (1.0 - base.a) + base.b * (1.0 - overlay.a);\u000a\u000a   mediump float a = overlay.a + base.a - overlay.a * base.a;\u000a   \u000a   gl_FragColor = vec4(ra, ga, ba, a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImage3x3ConvolutionFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImage3x3ConvolutionFilter" final="false" name="GPUImageEmbossFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageEmbossFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageEmbossFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageEmbossFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageEmbossFilter" visibility="public">
        <parameter name="intensity" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="getIntensity" native="false" return="float" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setIntensity" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="intensity" type="float">
        </parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageExclusionBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageExclusionBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageExclusionBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="EXCLUSION_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a     mediump vec4 base = texture2D(inputImageTexture, textureCoordinate);\u000a     mediump vec4 overlay = texture2D(inputImageTexture2, textureCoordinate2);\u000a     \u000a     //     Dca = (Sca.Da + Dca.Sa - 2.Sca.Dca) + Sca.(1 - Da) + Dca.(1 - Sa)\u000a     \u000a     gl_FragColor = vec4((overlay.rgb * base.a + base.rgb * overlay.a - 2.0 * overlay.rgb * base.rgb) + overlay.rgb * (1.0 - base.a) + base.rgb * (1.0 - overlay.a), base.a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageExposureFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageExposureFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageExposureFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageExposureFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageExposureFilter" visibility="public">
        <parameter name="exposure" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setExposure" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="exposure" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="EXPOSURE_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot; varying highp vec2 textureCoordinate;\u000a \u000a uniform sampler2D inputImageTexture;\u000a uniform highp float exposure;\u000a \u000a void main()\u000a {\u000a     highp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a     \u000a     gl_FragColor = vec4(textureColor.rgb * pow(2.0, exposure), textureColor.w);\u000a } &quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageFalseColorFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageFalseColorFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageFalseColorFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageFalseColorFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageFalseColorFilter" visibility="public">
        <parameter name="firstRed" type="float">
        </parameter>
        <parameter name="firstGreen" type="float">
        </parameter>
        <parameter name="firstBlue" type="float">
        </parameter>
        <parameter name="secondRed" type="float">
        </parameter>
        <parameter name="secondGreen" type="float">
        </parameter>
        <parameter name="secondBlue" type="float">
        </parameter>
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageFalseColorFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageFalseColorFilter" visibility="public">
        <parameter name="firstColor" type="float[]">
        </parameter>
        <parameter name="secondColor" type="float[]">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setFirstColor" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="firstColor" type="float[]">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setSecondColor" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="secondColor" type="float[]">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="FALSECOLOR_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision lowp float;\u000a\u000avarying highp vec2 textureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000auniform float intensity;\u000auniform vec3 firstColor;\u000auniform vec3 secondColor;\u000a\u000aconst mediump vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);\u000a\u000avoid main()\u000a{\u000alowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000afloat luminance = dot(textureColor.rgb, luminanceWeighting);\u000a\u000agl_FragColor = vec4( mix(firstColor.rgb, secondColor.rgb, luminance), textureColor.a);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageFilter" visibility="public">
        <parameter name="vertexShader" type="java.lang.String">
        </parameter>
        <parameter name="fragmentShader" type="java.lang.String">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="convertStreamToString" native="false" return="java.lang.String" static="true" synchronized="false" visibility="public">
        <parameter name="is" type="java.io.InputStream">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="true" name="destroy" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getAttribPosition" native="false" return="int" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getAttribTextureCoordinate" native="false" return="int" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getOutputHeight" native="false" return="int" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getOutputWidth" native="false" return="int" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getProgram" native="false" return="int" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getUniformTexture" native="false" return="int" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="true" name="init" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isInitialized" native="false" return="boolean" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="loadShader" native="false" return="java.lang.String" static="true" synchronized="false" visibility="public">
        <parameter name="file" type="java.lang.String">
        </parameter>
        <parameter name="context" type="android.content.Context">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onDestroy" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onDraw" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="textureId" type="int">
        </parameter>
        <parameter name="cubeBuffer" type="java.nio.FloatBuffer">
        </parameter>
        <parameter name="textureBuffer" type="java.nio.FloatBuffer">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onDrawArraysPre" native="false" return="void" static="false" synchronized="false" visibility="protected">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onInit" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onInitialized" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onOutputSizeChanged" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="width" type="int">
        </parameter>
        <parameter name="height" type="int">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="runOnDraw" native="false" return="void" static="false" synchronized="false" visibility="protected">
        <parameter name="runnable" type="java.lang.Runnable">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="runPendingOnDrawTasks" native="false" return="void" static="false" synchronized="false" visibility="protected">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setFloat" native="false" return="void" static="false" synchronized="false" visibility="protected">
        <parameter name="location" type="int">
        </parameter>
        <parameter name="floatValue" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setFloatArray" native="false" return="void" static="false" synchronized="false" visibility="protected">
        <parameter name="location" type="int">
        </parameter>
        <parameter name="arrayValue" type="float[]">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setFloatVec2" native="false" return="void" static="false" synchronized="false" visibility="protected">
        <parameter name="location" type="int">
        </parameter>
        <parameter name="arrayValue" type="float[]">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setFloatVec3" native="false" return="void" static="false" synchronized="false" visibility="protected">
        <parameter name="location" type="int">
        </parameter>
        <parameter name="arrayValue" type="float[]">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setFloatVec4" native="false" return="void" static="false" synchronized="false" visibility="protected">
        <parameter name="location" type="int">
        </parameter>
        <parameter name="arrayValue" type="float[]">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setInteger" native="false" return="void" static="false" synchronized="false" visibility="protected">
        <parameter name="location" type="int">
        </parameter>
        <parameter name="intValue" type="int">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setPoint" native="false" return="void" static="false" synchronized="false" visibility="protected">
        <parameter name="location" type="int">
        </parameter>
        <parameter name="point" type="android.graphics.PointF">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setUniformMatrix3f" native="false" return="void" static="false" synchronized="false" visibility="protected">
        <parameter name="location" type="int">
        </parameter>
        <parameter name="matrix" type="float[]">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setUniformMatrix4f" native="false" return="void" static="false" synchronized="false" visibility="protected">
        <parameter name="location" type="int">
        </parameter>
        <parameter name="matrix" type="float[]">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="NO_FILTER_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a \u000auniform sampler2D inputImageTexture;\u000a \u000avoid main()\u000a{\u000a     gl_FragColor = texture2D(inputImageTexture, textureCoordinate);\u000a}&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="NO_FILTER_VERTEX_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;attribute vec4 position;\u000aattribute vec4 inputTextureCoordinate;\u000a \u000avarying vec2 textureCoordinate;\u000a \u000avoid main()\u000a{\u000a    gl_Position = position;\u000a    textureCoordinate = inputTextureCoordinate.xy;\u000a}&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="false" name="mGLAttribPosition" static="false" transient="false" type="int" type-generic-aware="int" visibility="protected" volatile="false">
      </field>
      <field deprecated="not deprecated" final="false" name="mGLAttribTextureCoordinate" static="false" transient="false" type="int" type-generic-aware="int" visibility="protected" volatile="false">
      </field>
      <field deprecated="not deprecated" final="false" name="mGLProgId" static="false" transient="false" type="int" type-generic-aware="int" visibility="protected" volatile="false">
      </field>
      <field deprecated="not deprecated" final="false" name="mGLUniformTexture" static="false" transient="false" type="int" type-generic-aware="int" visibility="protected" volatile="false">
      </field>
      <field deprecated="not deprecated" final="false" name="mOutputHeight" static="false" transient="false" type="int" type-generic-aware="int" visibility="protected" volatile="false">
      </field>
      <field deprecated="not deprecated" final="false" name="mOutputWidth" static="false" transient="false" type="int" type-generic-aware="int" visibility="protected" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageFilter.1" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageFilter.2" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageFilter.3" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageFilter.4" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageFilter.5" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageFilter.6" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageFilter.7" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageFilter.8" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageFilter.9" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageFilterGroup" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageFilterGroup" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageFilterGroup" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup" visibility="public">
        <parameter name="filters" type="java.util.List&lt;jp.co.cyberagent.android.gpuimage.GPUImageFilter&gt;">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="addFilter" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="aFilter" type="jp.co.cyberagent.android.gpuimage.GPUImageFilter">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getFilters" native="false" return="java.util.List&lt;jp.co.cyberagent.android.gpuimage.GPUImageFilter&gt;" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getMergedFilters" native="false" return="java.util.List&lt;jp.co.cyberagent.android.gpuimage.GPUImageFilter&gt;" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="updateMergedFilters" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
      <field deprecated="not deprecated" final="false" name="mFilters" static="false" transient="false" type="java.util.List" type-generic-aware="java.util.List&lt;jp.co.cyberagent.android.gpuimage.GPUImageFilter&gt;" visibility="protected" volatile="false">
      </field>
      <field deprecated="not deprecated" final="false" name="mMergedFilters" static="false" transient="false" type="java.util.List" type-generic-aware="java.util.List&lt;jp.co.cyberagent.android.gpuimage.GPUImageFilter&gt;" visibility="protected" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageGammaFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageGammaFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageGammaFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageGammaFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageGammaFilter" visibility="public">
        <parameter name="gamma" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setGamma" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="gamma" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="GAMMA_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a \u000a uniform sampler2D inputImageTexture;\u000a uniform lowp float gamma;\u000a \u000a void main()\u000a {\u000a     lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a     \u000a     gl_FragColor = vec4(pow(textureColor.rgb, vec3(gamma)), textureColor.w);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoPassTextureSamplingFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoPassTextureSamplingFilter" final="false" name="GPUImageGaussianBlurFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageGaussianBlurFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageGaussianBlurFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageGaussianBlurFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageGaussianBlurFilter" visibility="public">
        <parameter name="blurSize" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setBlurSize" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="blurSize" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;uniform sampler2D inputImageTexture;\u000a\u000aconst lowp int GAUSSIAN_SAMPLES = 9;\u000a\u000avarying highp vec2 textureCoordinate;\u000avarying highp vec2 blurCoordinates[GAUSSIAN_SAMPLES];\u000a\u000avoid main()\u000a{\u000a\u0009lowp vec3 sum = vec3(0.0);\u000a   lowp vec4 fragColor=texture2D(inputImageTexture,textureCoordinate);\u000a\u0009\u000a    sum += texture2D(inputImageTexture, blurCoordinates[0]).rgb * 0.05;\u000a    sum += texture2D(inputImageTexture, blurCoordinates[1]).rgb * 0.09;\u000a    sum += texture2D(inputImageTexture, blurCoordinates[2]).rgb * 0.12;\u000a    sum += texture2D(inputImageTexture, blurCoordinates[3]).rgb * 0.15;\u000a    sum += texture2D(inputImageTexture, blurCoordinates[4]).rgb * 0.18;\u000a    sum += texture2D(inputImageTexture, blurCoordinates[5]).rgb * 0.15;\u000a    sum += texture2D(inputImageTexture, blurCoordinates[6]).rgb * 0.12;\u000a    sum += texture2D(inputImageTexture, blurCoordinates[7]).rgb * 0.09;\u000a    sum += texture2D(inputImageTexture, blurCoordinates[8]).rgb * 0.05;\u000a\u000a\u0009gl_FragColor = vec4(sum,fragColor.a);\u000a}&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="VERTEX_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;attribute vec4 position;\u000aattribute vec4 inputTextureCoordinate;\u000a\u000aconst int GAUSSIAN_SAMPLES = 9;\u000a\u000auniform float texelWidthOffset;\u000auniform float texelHeightOffset;\u000a\u000avarying vec2 textureCoordinate;\u000avarying vec2 blurCoordinates[GAUSSIAN_SAMPLES];\u000a\u000avoid main()\u000a{\u000a\u0009gl_Position = position;\u000a\u0009textureCoordinate = inputTextureCoordinate.xy;\u000a\u0009\u000a\u0009// Calculate the positions for the blur\u000a\u0009int multiplier = 0;\u000a\u0009vec2 blurStep;\u000a   vec2 singleStepOffset = vec2(texelHeightOffset, texelWidthOffset);\u000a    \u000a\u0009for (int i = 0; i &lt; GAUSSIAN_SAMPLES; i++)\u000a   {\u000a\u0009\u0009multiplier = (i - ((GAUSSIAN_SAMPLES - 1) / 2));\u000a       // Blur in x (horizontal)\u000a       blurStep = float(multiplier) * singleStepOffset;\u000a\u0009\u0009blurCoordinates[i] = inputTextureCoordinate.xy + blurStep;\u000a\u0009}\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="false" name="mBlurSize" static="false" transient="false" type="float" type-generic-aware="float" visibility="protected" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageGaussianBlurFilter.1" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageGlassSphereFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageGlassSphereFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageGlassSphereFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageGlassSphereFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageGlassSphereFilter" visibility="public">
        <parameter name="center" type="android.graphics.PointF">
        </parameter>
        <parameter name="radius" type="float">
        </parameter>
        <parameter name="refractiveIndex" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setCenter" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="center" type="android.graphics.PointF">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRadius" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="radius" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRefractiveIndex" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="refractiveIndex" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="SPHERE_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000auniform highp vec2 center;\u000auniform highp float radius;\u000auniform highp float aspectRatio;\u000auniform highp float refractiveIndex;\u000a// uniform vec3 lightPosition;\u000aconst highp vec3 lightPosition = vec3(-0.5, 0.5, 1.0);\u000aconst highp vec3 ambientLightPosition = vec3(0.0, 0.0, 1.0);\u000a\u000avoid main()\u000a{\u000ahighp vec2 textureCoordinateToUse = vec2(textureCoordinate.x, (textureCoordinate.y * aspectRatio + 0.5 - 0.5 * aspectRatio));\u000ahighp float distanceFromCenter = distance(center, textureCoordinateToUse);\u000alowp float checkForPresenceWithinSphere = step(distanceFromCenter, radius);\u000a\u000adistanceFromCenter = distanceFromCenter / radius;\u000a\u000ahighp float normalizedDepth = radius * sqrt(1.0 - distanceFromCenter * distanceFromCenter);\u000ahighp vec3 sphereNormal = normalize(vec3(textureCoordinateToUse - center, normalizedDepth));\u000a\u000ahighp vec3 refractedVector = 2.0 * refract(vec3(0.0, 0.0, -1.0), sphereNormal, refractiveIndex);\u000arefractedVector.xy = -refractedVector.xy;\u000a\u000ahighp vec3 finalSphereColor = texture2D(inputImageTexture, (refractedVector.xy + 1.0) * 0.5).rgb;\u000a\u000a// Grazing angle lighting\u000ahighp float lightingIntensity = 2.5 * (1.0 - pow(clamp(dot(ambientLightPosition, sphereNormal), 0.0, 1.0), 0.25));\u000afinalSphereColor += lightingIntensity;\u000a\u000a// Specular lighting\u000alightingIntensity  = clamp(dot(normalize(lightPosition), sphereNormal), 0.0, 1.0);\u000alightingIntensity  = pow(lightingIntensity, 15.0);\u000afinalSphereColor += vec3(0.8, 0.8, 0.8) * lightingIntensity;\u000a\u000agl_FragColor = vec4(finalSphereColor, 1.0) * checkForPresenceWithinSphere;\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageGrayscaleFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageGrayscaleFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageGrayscaleFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="GRAYSCALE_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision highp float;\u000a\u000avarying vec2 textureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000aconst highp vec3 W = vec3(0.2125, 0.7154, 0.0721);\u000a\u000avoid main()\u000a{\u000a  lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a  float luminance = dot(textureColor.rgb, W);\u000a\u000a  gl_FragColor = vec4(vec3(luminance), textureColor.a);\u000a}&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageHardLightBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageHardLightBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageHardLightBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="HARD_LIGHT_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a\u000a const highp vec3 W = vec3(0.2125, 0.7154, 0.0721);\u000a\u000a void main()\u000a {\u000a     mediump vec4 base = texture2D(inputImageTexture, textureCoordinate);\u000a     mediump vec4 overlay = texture2D(inputImageTexture2, textureCoordinate2);\u000a\u000a     highp float ra;\u000a     if (2.0 * overlay.r &lt; overlay.a) {\u000a         ra = 2.0 * overlay.r * base.r + overlay.r * (1.0 - base.a) + base.r * (1.0 - overlay.a);\u000a     } else {\u000a         ra = overlay.a * base.a - 2.0 * (base.a - base.r) * (overlay.a - overlay.r) + overlay.r * (1.0 - base.a) + base.r * (1.0 - overlay.a);\u000a     }\u000a     \u000a     highp float ga;\u000a     if (2.0 * overlay.g &lt; overlay.a) {\u000a         ga = 2.0 * overlay.g * base.g + overlay.g * (1.0 - base.a) + base.g * (1.0 - overlay.a);\u000a     } else {\u000a         ga = overlay.a * base.a - 2.0 * (base.a - base.g) * (overlay.a - overlay.g) + overlay.g * (1.0 - base.a) + base.g * (1.0 - overlay.a);\u000a     }\u000a     \u000a     highp float ba;\u000a     if (2.0 * overlay.b &lt; overlay.a) {\u000a         ba = 2.0 * overlay.b * base.b + overlay.b * (1.0 - base.a) + base.b * (1.0 - overlay.a);\u000a     } else {\u000a         ba = overlay.a * base.a - 2.0 * (base.a - base.b) * (overlay.a - overlay.b) + overlay.b * (1.0 - base.a) + base.b * (1.0 - overlay.a);\u000a     }\u000a     \u000a     gl_FragColor = vec4(ra, ga, ba, 1.0);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageHazeFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageHazeFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageHazeFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageHazeFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageHazeFilter" visibility="public">
        <parameter name="distance" type="float">
        </parameter>
        <parameter name="slope" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setDistance" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="distance" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setSlope" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="slope" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="HAZE_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000auniform lowp float distance;\u000auniform highp float slope;\u000a\u000avoid main()\u000a{\u000a\u0009//todo reconsider precision modifiers\u0009 \u000a\u0009 highp vec4 color = vec4(1.0);//todo reimplement as a parameter\u000a\u000a\u0009 highp float  d = textureCoordinate.y * slope  +  distance; \u000a\u000a\u0009 highp vec4 c = texture2D(inputImageTexture, textureCoordinate) ; // consider using unpremultiply\u000a\u000a\u0009 c = (c - d * color) / (1.0 -d);\u000a\u000a\u0009 gl_FragColor = c; //consider using premultiply(c);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageHighlightShadowFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageHighlightShadowFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageHighlightShadowFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageHighlightShadowFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageHighlightShadowFilter" visibility="public">
        <parameter name="shadows" type="float">
        </parameter>
        <parameter name="highlights" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setHighlights" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="highlights" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setShadows" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="shadows" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="HIGHLIGHT_SHADOW_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot; uniform sampler2D inputImageTexture;\u000a varying highp vec2 textureCoordinate;\u000a  \u000a uniform lowp float shadows;\u000a uniform lowp float highlights;\u000a \u000a const mediump vec3 luminanceWeighting = vec3(0.3, 0.3, 0.3);\u000a \u000a void main()\u000a {\u000a \u0009lowp vec4 source = texture2D(inputImageTexture, textureCoordinate);\u000a \u0009mediump float luminance = dot(source.rgb, luminanceWeighting);\u000a \u000a \u0009mediump float shadow = clamp((pow(luminance, 1.0/(shadows+1.0)) + (-0.76)*pow(luminance, 2.0/(shadows+1.0))) - luminance, 0.0, 1.0);\u000a \u0009mediump float highlight = clamp((1.0 - (pow(1.0-luminance, 1.0/(2.0-highlights)) + (-0.8)*pow(1.0-luminance, 2.0/(2.0-highlights)))) - luminance, -1.0, 0.0);\u000a \u0009lowp vec3 result = vec3(0.0, 0.0, 0.0) + ((luminance + shadow + highlight) - 0.0) * ((source.rgb - vec3(0.0, 0.0, 0.0))/(luminance - 0.0));\u000a \u000a \u0009gl_FragColor = vec4(result.rgb, source.a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageHueBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageHueBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageHueBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="HUE_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a \u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a highp float lum(lowp vec3 c) {\u000a     return dot(c, vec3(0.3, 0.59, 0.11));\u000a }\u000a \u000a lowp vec3 clipcolor(lowp vec3 c) {\u000a     highp float l = lum(c);\u000a     lowp float n = min(min(c.r, c.g), c.b);\u000a     lowp float x = max(max(c.r, c.g), c.b);\u000a     \u000a     if (n &lt; 0.0) {\u000a         c.r = l + ((c.r - l) * l) / (l - n);\u000a         c.g = l + ((c.g - l) * l) / (l - n);\u000a         c.b = l + ((c.b - l) * l) / (l - n);\u000a     }\u000a     if (x &gt; 1.0) {\u000a         c.r = l + ((c.r - l) * (1.0 - l)) / (x - l);\u000a         c.g = l + ((c.g - l) * (1.0 - l)) / (x - l);\u000a         c.b = l + ((c.b - l) * (1.0 - l)) / (x - l);\u000a     }\u000a     \u000a     return c;\u000a }\u000a \u000a lowp vec3 setlum(lowp vec3 c, highp float l) {\u000a     highp float d = l - lum(c);\u000a     c = c + vec3(d);\u000a     return clipcolor(c);\u000a }\u000a \u000a highp float sat(lowp vec3 c) {\u000a     lowp float n = min(min(c.r, c.g), c.b);\u000a     lowp float x = max(max(c.r, c.g), c.b);\u000a     return x - n;\u000a }\u000a \u000a lowp float mid(lowp float cmin, lowp float cmid, lowp float cmax, highp float s) {\u000a     return ((cmid - cmin) * s) / (cmax - cmin);\u000a }\u000a \u000a lowp vec3 setsat(lowp vec3 c, highp float s) {\u000a     if (c.r &gt; c.g) {\u000a         if (c.r &gt; c.b) {\u000a             if (c.g &gt; c.b) {\u000a                 /* g is mid, b is min */\u000a                 c.g = mid(c.b, c.g, c.r, s);\u000a                 c.b = 0.0;\u000a             } else {\u000a                 /* b is mid, g is min */\u000a                 c.b = mid(c.g, c.b, c.r, s);\u000a                 c.g = 0.0;\u000a             }\u000a             c.r = s;\u000a         } else {\u000a             /* b is max, r is mid, g is min */\u000a             c.r = mid(c.g, c.r, c.b, s);\u000a             c.b = s;\u000a             c.r = 0.0;\u000a         }\u000a     } else if (c.r &gt; c.b) {\u000a         /* g is max, r is mid, b is min */\u000a         c.r = mid(c.b, c.r, c.g, s);\u000a         c.g = s;\u000a         c.b = 0.0;\u000a     } else if (c.g &gt; c.b) {\u000a         /* g is max, b is mid, r is min */\u000a         c.b = mid(c.r, c.b, c.g, s);\u000a         c.g = s;\u000a         c.r = 0.0;\u000a     } else if (c.b &gt; c.g) {\u000a         /* b is max, g is mid, r is min */\u000a         c.g = mid(c.r, c.g, c.b, s);\u000a         c.b = s;\u000a         c.r = 0.0;\u000a     } else {\u000a         c = vec3(0.0);\u000a     }\u000a     return c;\u000a }\u000a \u000a void main()\u000a {\u000a   highp vec4 baseColor = texture2D(inputImageTexture, textureCoordinate);\u000a   highp vec4 overlayColor = texture2D(inputImageTexture2, textureCoordinate2);\u000a     \u000a     gl_FragColor = vec4(baseColor.rgb * (1.0 - overlayColor.a) + setlum(setsat(overlayColor.rgb, sat(baseColor.rgb)), lum(baseColor.rgb)) * overlayColor.a, baseColor.a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageHueFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageHueFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageHueFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageHueFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageHueFilter" visibility="public">
        <parameter name="hue" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setHue" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="hue" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="HUE_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision highp float;\u000avarying highp vec2 textureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000auniform mediump float hueAdjust;\u000aconst highp vec4 kRGBToYPrime = vec4 (0.299, 0.587, 0.114, 0.0);\u000aconst highp vec4 kRGBToI = vec4 (0.595716, -0.274453, -0.321263, 0.0);\u000aconst highp vec4 kRGBToQ = vec4 (0.211456, -0.522591, 0.31135, 0.0);\u000a\u000aconst highp vec4 kYIQToR = vec4 (1.0, 0.9563, 0.6210, 0.0);\u000aconst highp vec4 kYIQToG = vec4 (1.0, -0.2721, -0.6474, 0.0);\u000aconst highp vec4 kYIQToB = vec4 (1.0, -1.1070, 1.7046, 0.0);\u000a\u000avoid main ()\u000a{\u000a    // Sample the input pixel\u000a    highp vec4 color = texture2D(inputImageTexture, textureCoordinate);\u000a\u000a    // Convert to YIQ\u000a    highp float YPrime = dot (color, kRGBToYPrime);\u000a    highp float I = dot (color, kRGBToI);\u000a    highp float Q = dot (color, kRGBToQ);\u000a\u000a    // Calculate the hue and chroma\u000a    highp float hue = atan (Q, I);\u000a    highp float chroma = sqrt (I * I + Q * Q);\u000a\u000a    // Make the user's adjustments\u000a    hue += (-hueAdjust); //why negative rotation?\u000a\u000a    // Convert back to YIQ\u000a    Q = chroma * sin (hue);\u000a    I = chroma * cos (hue);\u000a\u000a    // Convert back to RGB\u000a    highp vec4 yIQ = vec4 (YPrime, I, Q, 0.0);\u000a    color.r = dot (yIQ, kYIQToR);\u000a    color.g = dot (yIQ, kYIQToG);\u000a    color.b = dot (yIQ, kYIQToB);\u000a\u000a    // Save the result\u000a    gl_FragColor = color;\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageKuwaharaFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageKuwaharaFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageKuwaharaFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageKuwaharaFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageKuwaharaFilter" visibility="public">
        <parameter name="radius" type="int">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRadius" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="radius" type="int">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="KUWAHARA_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000auniform sampler2D inputImageTexture;\u000auniform int radius;\u000a\u000aprecision highp float;\u000a\u000aconst vec2 src_size = vec2 (1.0 / 768.0, 1.0 / 1024.0);\u000a\u000avoid main (void) \u000a{\u000avec2 uv = textureCoordinate;\u000afloat n = float((radius + 1) * (radius + 1));\u000aint i; int j;\u000avec3 m0 = vec3(0.0); vec3 m1 = vec3(0.0); vec3 m2 = vec3(0.0); vec3 m3 = vec3(0.0);\u000avec3 s0 = vec3(0.0); vec3 s1 = vec3(0.0); vec3 s2 = vec3(0.0); vec3 s3 = vec3(0.0);\u000avec3 c;\u000a\u000afor (j = -radius; j &lt;= 0; ++j)  {\u000afor (i = -radius; i &lt;= 0; ++i)  {\u000ac = texture2D(inputImageTexture, uv + vec2(i,j) * src_size).rgb;\u000am0 += c;\u000as0 += c * c;\u000a}\u000a}\u000a\u000afor (j = -radius; j &lt;= 0; ++j)  {\u000afor (i = 0; i &lt;= radius; ++i)  {\u000ac = texture2D(inputImageTexture, uv + vec2(i,j) * src_size).rgb;\u000am1 += c;\u000as1 += c * c;\u000a}\u000a}\u000a\u000afor (j = 0; j &lt;= radius; ++j)  {\u000afor (i = 0; i &lt;= radius; ++i)  {\u000ac = texture2D(inputImageTexture, uv + vec2(i,j) * src_size).rgb;\u000am2 += c;\u000as2 += c * c;\u000a}\u000a}\u000a\u000afor (j = 0; j &lt;= radius; ++j)  {\u000afor (i = -radius; i &lt;= 0; ++i)  {\u000ac = texture2D(inputImageTexture, uv + vec2(i,j) * src_size).rgb;\u000am3 += c;\u000as3 += c * c;\u000a}\u000a}\u000a\u000a\u000afloat min_sigma2 = 1e+2;\u000am0 /= n;\u000as0 = abs(s0 / n - m0 * m0);\u000a\u000afloat sigma2 = s0.r + s0.g + s0.b;\u000aif (sigma2 &lt; min_sigma2) {\u000amin_sigma2 = sigma2;\u000agl_FragColor = vec4(m0, 1.0);\u000a}\u000a\u000am1 /= n;\u000as1 = abs(s1 / n - m1 * m1);\u000a\u000asigma2 = s1.r + s1.g + s1.b;\u000aif (sigma2 &lt; min_sigma2) {\u000amin_sigma2 = sigma2;\u000agl_FragColor = vec4(m1, 1.0);\u000a}\u000a\u000am2 /= n;\u000as2 = abs(s2 / n - m2 * m2);\u000a\u000asigma2 = s2.r + s2.g + s2.b;\u000aif (sigma2 &lt; min_sigma2) {\u000amin_sigma2 = sigma2;\u000agl_FragColor = vec4(m2, 1.0);\u000a}\u000a\u000am3 /= n;\u000as3 = abs(s3 / n - m3 * m3);\u000a\u000asigma2 = s3.r + s3.g + s3.b;\u000aif (sigma2 &lt; min_sigma2) {\u000amin_sigma2 = sigma2;\u000agl_FragColor = vec4(m3, 1.0);\u000a}\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" final="false" name="GPUImageLaplacianFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageLaplacianFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageLaplacianFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="LAPLACIAN_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision highp float;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000auniform mediump mat3 convolutionMatrix;\u000a\u000avarying vec2 textureCoordinate;\u000avarying vec2 leftTextureCoordinate;\u000avarying vec2 rightTextureCoordinate;\u000a\u000avarying vec2 topTextureCoordinate;\u000avarying vec2 topLeftTextureCoordinate;\u000avarying vec2 topRightTextureCoordinate;\u000a\u000avarying vec2 bottomTextureCoordinate;\u000avarying vec2 bottomLeftTextureCoordinate;\u000avarying vec2 bottomRightTextureCoordinate;\u000a\u000avoid main()\u000a{\u000amediump vec3 bottomColor = texture2D(inputImageTexture, bottomTextureCoordinate).rgb;\u000amediump vec3 bottomLeftColor = texture2D(inputImageTexture, bottomLeftTextureCoordinate).rgb;\u000amediump vec3 bottomRightColor = texture2D(inputImageTexture, bottomRightTextureCoordinate).rgb;\u000amediump vec4 centerColor = texture2D(inputImageTexture, textureCoordinate);\u000amediump vec3 leftColor = texture2D(inputImageTexture, leftTextureCoordinate).rgb;\u000amediump vec3 rightColor = texture2D(inputImageTexture, rightTextureCoordinate).rgb;\u000amediump vec3 topColor = texture2D(inputImageTexture, topTextureCoordinate).rgb;\u000amediump vec3 topRightColor = texture2D(inputImageTexture, topRightTextureCoordinate).rgb;\u000amediump vec3 topLeftColor = texture2D(inputImageTexture, topLeftTextureCoordinate).rgb;\u000a\u000amediump vec3 resultColor = topLeftColor * convolutionMatrix[0][0] + topColor * convolutionMatrix[0][1] + topRightColor * convolutionMatrix[0][2];\u000aresultColor += leftColor * convolutionMatrix[1][0] + centerColor.rgb * convolutionMatrix[1][1] + rightColor * convolutionMatrix[1][2];\u000aresultColor += bottomLeftColor * convolutionMatrix[2][0] + bottomColor * convolutionMatrix[2][1] + bottomRightColor * convolutionMatrix[2][2];\u000a\u000a// Normalize the results to allow for negative gradients in the 0.0-1.0 colorspace\u000aresultColor = resultColor + 0.5;\u000a\u000agl_FragColor = vec4(resultColor, centerColor.a);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageLevelsFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageLevelsFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageLevelsFilter" visibility="public">
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setBlueMin" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="min" type="float">
        </parameter>
        <parameter name="mid" type="float">
        </parameter>
        <parameter name="max" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setBlueMin" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="min" type="float">
        </parameter>
        <parameter name="mid" type="float">
        </parameter>
        <parameter name="max" type="float">
        </parameter>
        <parameter name="minOut" type="float">
        </parameter>
        <parameter name="maxOut" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setGreenMin" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="min" type="float">
        </parameter>
        <parameter name="mid" type="float">
        </parameter>
        <parameter name="max" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setGreenMin" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="min" type="float">
        </parameter>
        <parameter name="mid" type="float">
        </parameter>
        <parameter name="max" type="float">
        </parameter>
        <parameter name="minOut" type="float">
        </parameter>
        <parameter name="maxOut" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setMin" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="min" type="float">
        </parameter>
        <parameter name="mid" type="float">
        </parameter>
        <parameter name="max" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setMin" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="min" type="float">
        </parameter>
        <parameter name="mid" type="float">
        </parameter>
        <parameter name="max" type="float">
        </parameter>
        <parameter name="minOut" type="float">
        </parameter>
        <parameter name="maxOut" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRedMin" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="min" type="float">
        </parameter>
        <parameter name="mid" type="float">
        </parameter>
        <parameter name="max" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRedMin" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="min" type="float">
        </parameter>
        <parameter name="mid" type="float">
        </parameter>
        <parameter name="max" type="float">
        </parameter>
        <parameter name="minOut" type="float">
        </parameter>
        <parameter name="maxOut" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="updateUniforms" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
      <field deprecated="not deprecated" final="true" name="LEVELS_FRAGMET_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot; varying highp vec2 textureCoordinate;\u000a \u000a uniform sampler2D inputImageTexture;\u000a uniform mediump vec3 levelMinimum;\u000a uniform mediump vec3 levelMiddle;\u000a uniform mediump vec3 levelMaximum;\u000a uniform mediump vec3 minOutput;\u000a uniform mediump vec3 maxOutput;\u000a \u000a void main()\u000a {\u000a     mediump vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a     \u000a     gl_FragColor = vec4( mix(minOutput, maxOutput, pow(min(max(textureColor.rgb -levelMinimum, vec3(0.0)) / (levelMaximum - levelMinimum  ), vec3(1.0)), 1.0 /levelMiddle)) , textureColor.a);\u000a }\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageLightenBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageLightenBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageLightenBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="LIGHTEN_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a    lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a    lowp vec4 textureColor2 = texture2D(inputImageTexture2, textureCoordinate2);\u000a    \u000a    gl_FragColor = max(textureColor, textureColor2);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageLinearBurnBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageLinearBurnBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageLinearBurnBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="LINEAR_BURN_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a \u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a     mediump vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a     mediump vec4 textureColor2 = texture2D(inputImageTexture2, textureCoordinate2);\u000a     \u000a     gl_FragColor = vec4(clamp(textureColor.rgb + textureColor2.rgb - vec3(1.0), vec3(0.0), vec3(1.0)), textureColor.a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageLookupFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageLookupFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageLookupFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="LOOKUP_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2; // TODO: This is not used\u000a \u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2; // lookup texture\u000a \u000a void main()\u000a {\u000a     lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a     \u000a     mediump float blueColor = textureColor.b * 63.0;\u000a     \u000a     mediump vec2 quad1;\u000a     quad1.y = floor(floor(blueColor) / 8.0);\u000a     quad1.x = floor(blueColor) - (quad1.y * 8.0);\u000a     \u000a     mediump vec2 quad2;\u000a     quad2.y = floor(ceil(blueColor) / 8.0);\u000a     quad2.x = ceil(blueColor) - (quad2.y * 8.0);\u000a     \u000a     highp vec2 texPos1;\u000a     texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);\u000a     texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);\u000a     \u000a     highp vec2 texPos2;\u000a     texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);\u000a     texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);\u000a     \u000a     lowp vec4 newColor1 = texture2D(inputImageTexture2, texPos1);\u000a     lowp vec4 newColor2 = texture2D(inputImageTexture2, texPos2);\u000a     \u000a     lowp vec4 newColor = mix(newColor1, newColor2, fract(blueColor));\u000a     gl_FragColor = vec4(newColor.rgb, textureColor.w);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageLuminosityBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageLuminosityBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageLuminosityBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="LUMINOSITY_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a \u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a highp float lum(lowp vec3 c) {\u000a     return dot(c, vec3(0.3, 0.59, 0.11));\u000a }\u000a \u000a lowp vec3 clipcolor(lowp vec3 c) {\u000a     highp float l = lum(c);\u000a     lowp float n = min(min(c.r, c.g), c.b);\u000a     lowp float x = max(max(c.r, c.g), c.b);\u000a     \u000a     if (n &lt; 0.0) {\u000a         c.r = l + ((c.r - l) * l) / (l - n);\u000a         c.g = l + ((c.g - l) * l) / (l - n);\u000a         c.b = l + ((c.b - l) * l) / (l - n);\u000a     }\u000a     if (x &gt; 1.0) {\u000a         c.r = l + ((c.r - l) * (1.0 - l)) / (x - l);\u000a         c.g = l + ((c.g - l) * (1.0 - l)) / (x - l);\u000a         c.b = l + ((c.b - l) * (1.0 - l)) / (x - l);\u000a     }\u000a     \u000a     return c;\u000a }\u000a \u000a lowp vec3 setlum(lowp vec3 c, highp float l) {\u000a     highp float d = l - lum(c);\u000a     c = c + vec3(d);\u000a     return clipcolor(c);\u000a }\u000a \u000a void main()\u000a {\u000a   highp vec4 baseColor = texture2D(inputImageTexture, textureCoordinate);\u000a   highp vec4 overlayColor = texture2D(inputImageTexture2, textureCoordinate2);\u000a     \u000a     gl_FragColor = vec4(baseColor.rgb * (1.0 - overlayColor.a) + setlum(baseColor.rgb, lum(overlayColor.rgb)) * overlayColor.a, baseColor.a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageMixBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageMixBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageMixBlendFilter" visibility="public">
        <parameter name="fragmentShader" type="java.lang.String">
        </parameter>
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageMixBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageMixBlendFilter" visibility="public">
        <parameter name="fragmentShader" type="java.lang.String">
        </parameter>
        <parameter name="mix" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setMix" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="mix" type="float">
        </parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageMonochromeFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageMonochromeFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageMonochromeFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageMonochromeFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageMonochromeFilter" visibility="public">
        <parameter name="intensity" type="float">
        </parameter>
        <parameter name="color" type="float[]">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setColor" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="color" type="float[]">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setColorRed" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="red" type="float">
        </parameter>
        <parameter name="green" type="float">
        </parameter>
        <parameter name="blue" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setIntensity" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="intensity" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="MONOCHROME_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot; precision lowp float;\u000a  \u000a  varying highp vec2 textureCoordinate;\u000a  \u000a  uniform sampler2D inputImageTexture;\u000a  uniform float intensity;\u000a  uniform vec3 filterColor;\u000a  \u000a  const mediump vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);\u000a  \u000a  void main()\u000a  {\u000a \u0009//desat, then apply overlay blend\u000a \u0009lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a \u0009float luminance = dot(textureColor.rgb, luminanceWeighting);\u000a \u0009\u000a \u0009lowp vec4 desat = vec4(vec3(luminance), 1.0);\u000a \u0009\u000a \u0009//overlay\u000a \u0009lowp vec4 outputColor = vec4(\u000a                                  (desat.r &lt; 0.5 ? (2.0 * desat.r * filterColor.r) : (1.0 - 2.0 * (1.0 - desat.r) * (1.0 - filterColor.r))),\u000a                                  (desat.g &lt; 0.5 ? (2.0 * desat.g * filterColor.g) : (1.0 - 2.0 * (1.0 - desat.g) * (1.0 - filterColor.g))),\u000a                                  (desat.b &lt; 0.5 ? (2.0 * desat.b * filterColor.b) : (1.0 - 2.0 * (1.0 - desat.b) * (1.0 - filterColor.b))),\u000a                                  1.0\u000a                                  );\u000a \u0009\u000a \u0009//which is better, or are they equal?\u000a \u0009gl_FragColor = vec4( mix(textureColor.rgb, outputColor.rgb, intensity), textureColor.a);\u000a  }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageMultiplyBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageMultiplyBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageMultiplyBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="MULTIPLY_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a     lowp vec4 base = texture2D(inputImageTexture, textureCoordinate);\u000a     lowp vec4 overlayer = texture2D(inputImageTexture2, textureCoordinate2);\u000a          \u000a     gl_FragColor = overlayer * base + overlayer * (1.0 - base.a) + base * (1.0 - overlayer.a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageNativeLibrary" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageNativeLibrary" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageNativeLibrary" visibility="public">
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="YUVtoARBG" native="true" return="void" static="true" synchronized="false" visibility="public">
        <parameter name="p0" type="byte[]">
        </parameter>
        <parameter name="p1" type="int">
        </parameter>
        <parameter name="p2" type="int">
        </parameter>
        <parameter name="p3" type="int[]">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="YUVtoRBGA" native="true" return="void" static="true" synchronized="false" visibility="public">
        <parameter name="p0" type="byte[]">
        </parameter>
        <parameter name="p1" type="int">
        </parameter>
        <parameter name="p2" type="int">
        </parameter>
        <parameter name="p3" type="int[]">
        </parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" final="false" name="GPUImageNonMaximumSuppressionFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageNonMaximumSuppressionFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageNonMaximumSuppressionFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="NMS_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;uniform sampler2D inputImageTexture;\u000a\u000avarying highp vec2 textureCoordinate;\u000avarying highp vec2 leftTextureCoordinate;\u000avarying highp vec2 rightTextureCoordinate;\u000a\u000avarying highp vec2 topTextureCoordinate;\u000avarying highp vec2 topLeftTextureCoordinate;\u000avarying highp vec2 topRightTextureCoordinate;\u000a\u000avarying highp vec2 bottomTextureCoordinate;\u000avarying highp vec2 bottomLeftTextureCoordinate;\u000avarying highp vec2 bottomRightTextureCoordinate;\u000a\u000avoid main()\u000a{\u000alowp float bottomColor = texture2D(inputImageTexture, bottomTextureCoordinate).r;\u000alowp float bottomLeftColor = texture2D(inputImageTexture, bottomLeftTextureCoordinate).r;\u000alowp float bottomRightColor = texture2D(inputImageTexture, bottomRightTextureCoordinate).r;\u000alowp vec4 centerColor = texture2D(inputImageTexture, textureCoordinate);\u000alowp float leftColor = texture2D(inputImageTexture, leftTextureCoordinate).r;\u000alowp float rightColor = texture2D(inputImageTexture, rightTextureCoordinate).r;\u000alowp float topColor = texture2D(inputImageTexture, topTextureCoordinate).r;\u000alowp float topRightColor = texture2D(inputImageTexture, topRightTextureCoordinate).r;\u000alowp float topLeftColor = texture2D(inputImageTexture, topLeftTextureCoordinate).r;\u000a\u000a// Use a tiebreaker for pixels to the left and immediately above this one\u000alowp float multiplier = 1.0 - step(centerColor.r, topColor);\u000amultiplier = multiplier * 1.0 - step(centerColor.r, topLeftColor);\u000amultiplier = multiplier * 1.0 - step(centerColor.r, leftColor);\u000amultiplier = multiplier * 1.0 - step(centerColor.r, bottomLeftColor);\u000a\u000alowp float maxValue = max(centerColor.r, bottomColor);\u000amaxValue = max(maxValue, bottomRightColor);\u000amaxValue = max(maxValue, rightColor);\u000amaxValue = max(maxValue, topRightColor);\u000a\u000agl_FragColor = vec4((centerColor.rgb * step(maxValue, centerColor.r) * multiplier), 1.0);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageNormalBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageNormalBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageNormalBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="NORMAL_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a \u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a     lowp vec4 c2 = texture2D(inputImageTexture, textureCoordinate);\u000a\u0009 lowp vec4 c1 = texture2D(inputImageTexture2, textureCoordinate2);\u000a     \u000a     lowp vec4 outputColor;\u000a     \u000a     outputColor.r = c1.r + c2.r * c2.a * (1.0 - c1.a);\u000a\u000a     outputColor.g = c1.g + c2.g * c2.a * (1.0 - c1.a);\u000a     \u000a     outputColor.b = c1.b + c2.b * c2.a * (1.0 - c1.a);\u000a     \u000a     outputColor.a = c1.a + c2.a * (1.0 - c1.a);\u000a     \u000a     gl_FragColor = outputColor;\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageOpacityFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageOpacityFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageOpacityFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageOpacityFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageOpacityFilter" visibility="public">
        <parameter name="opacity" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setOpacity" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="opacity" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="OPACITY_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;  varying highp vec2 textureCoordinate;\u000a  \u000a  uniform sampler2D inputImageTexture;\u000a  uniform lowp float opacity;\u000a  \u000a  void main()\u000a  {\u000a      lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a      \u000a      gl_FragColor = vec4(textureColor.rgb, textureColor.a * opacity);\u000a  }\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageOverlayBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageOverlayBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageOverlayBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="OVERLAY_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a     mediump vec4 base = texture2D(inputImageTexture, textureCoordinate);\u000a     mediump vec4 overlay = texture2D(inputImageTexture2, textureCoordinate2);\u000a     \u000a     mediump float ra;\u000a     if (2.0 * base.r &lt; base.a) {\u000a         ra = 2.0 * overlay.r * base.r + overlay.r * (1.0 - base.a) + base.r * (1.0 - overlay.a);\u000a     } else {\u000a         ra = overlay.a * base.a - 2.0 * (base.a - base.r) * (overlay.a - overlay.r) + overlay.r * (1.0 - base.a) + base.r * (1.0 - overlay.a);\u000a     }\u000a     \u000a     mediump float ga;\u000a     if (2.0 * base.g &lt; base.a) {\u000a         ga = 2.0 * overlay.g * base.g + overlay.g * (1.0 - base.a) + base.g * (1.0 - overlay.a);\u000a     } else {\u000a         ga = overlay.a * base.a - 2.0 * (base.a - base.g) * (overlay.a - overlay.g) + overlay.g * (1.0 - base.a) + base.g * (1.0 - overlay.a);\u000a     }\u000a     \u000a     mediump float ba;\u000a     if (2.0 * base.b &lt; base.a) {\u000a         ba = 2.0 * overlay.b * base.b + overlay.b * (1.0 - base.a) + base.b * (1.0 - overlay.a);\u000a     } else {\u000a         ba = overlay.a * base.a - 2.0 * (base.a - base.b) * (overlay.a - overlay.b) + overlay.b * (1.0 - base.a) + base.b * (1.0 - overlay.a);\u000a     }\u000a     \u000a     gl_FragColor = vec4(ra, ga, ba, 1.0);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImagePixelationFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImagePixelationFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImagePixelationFilter" visibility="public">
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setPixel" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="pixel" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="PIXELATION_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision highp float;\u000avarying vec2 textureCoordinate;\u000auniform float imageWidthFactor;\u000auniform float imageHeightFactor;\u000auniform sampler2D inputImageTexture;\u000auniform float pixel;\u000avoid main()\u000a{\u000a  vec2 uv  = textureCoordinate.xy;\u000a  float dx = pixel * imageWidthFactor;\u000a  float dy = pixel * imageHeightFactor;\u000a  vec2 coord = vec2(dx * floor(uv.x / dx), dy * floor(uv.y / dy));\u000a  vec3 tc = texture2D(inputImageTexture, coord).xyz;\u000a  gl_FragColor = vec4(tc, 1.0);\u000a}&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImagePosterizeFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImagePosterizeFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImagePosterizeFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImagePosterizeFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImagePosterizeFilter" visibility="public">
        <parameter name="colorLevels" type="int">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setColorLevels" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="colorLevels" type="int">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="POSTERIZE_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000auniform highp float colorLevels;\u000a\u000avoid main()\u000a{\u000a   highp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a   \u000a   gl_FragColor = floor((textureColor * colorLevels) + vec4(0.5)) / colorLevels;\u000a}&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageRenderer" static="false" visibility="public">
      <implements name="android.hardware.Camera.PreviewCallback" name-generic-aware="android.hardware.Camera.PreviewCallback">
      </implements>
      <implements name="android.opengl.GLSurfaceView.Renderer" name-generic-aware="android.opengl.GLSurfaceView.Renderer">
      </implements>
      <constructor deprecated="not deprecated" final="false" name="GPUImageRenderer" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageRenderer" visibility="public">
        <parameter name="filter" type="jp.co.cyberagent.android.gpuimage.GPUImageFilter">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="deleteImage" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getFrameHeight" native="false" return="int" static="false" synchronized="false" visibility="protected">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getFrameWidth" native="false" return="int" static="false" synchronized="false" visibility="protected">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getRotation" native="false" return="jp.co.cyberagent.android.gpuimage.Rotation" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isFlippedHorizontally" native="false" return="boolean" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="isFlippedVertically" native="false" return="boolean" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onDrawFrame" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="gl" type="javax.microedition.khronos.opengles.GL10">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onPreviewFrame" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="data" type="byte[]">
        </parameter>
        <parameter name="camera" type="android.hardware.Camera">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onSurfaceChanged" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="gl" type="javax.microedition.khronos.opengles.GL10">
        </parameter>
        <parameter name="width" type="int">
        </parameter>
        <parameter name="height" type="int">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onSurfaceCreated" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="unused" type="javax.microedition.khronos.opengles.GL10">
        </parameter>
        <parameter name="config" type="javax.microedition.khronos.egl.EGLConfig">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="runOnDraw" native="false" return="void" static="false" synchronized="false" visibility="protected">
        <parameter name="runnable" type="java.lang.Runnable">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="runOnDrawEnd" native="false" return="void" static="false" synchronized="false" visibility="protected">
        <parameter name="runnable" type="java.lang.Runnable">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setFilter" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="filter" type="jp.co.cyberagent.android.gpuimage.GPUImageFilter">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setImageBitmap" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="bitmap" type="android.graphics.Bitmap">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setImageBitmap" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="bitmap" type="android.graphics.Bitmap">
        </parameter>
        <parameter name="recycle" type="boolean">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRotation" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="rotation" type="jp.co.cyberagent.android.gpuimage.Rotation">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRotation" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="rotation" type="jp.co.cyberagent.android.gpuimage.Rotation">
        </parameter>
        <parameter name="flipHorizontal" type="boolean">
        </parameter>
        <parameter name="flipVertical" type="boolean">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRotationCamera" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="rotation" type="jp.co.cyberagent.android.gpuimage.Rotation">
        </parameter>
        <parameter name="flipHorizontal" type="boolean">
        </parameter>
        <parameter name="flipVertical" type="boolean">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setScaleType" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="scaleType" type="jp.co.cyberagent.android.gpuimage.GPUImage.ScaleType">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setUpSurfaceTexture" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="camera" type="android.hardware.Camera">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="NO_IMAGE" static="true" transient="false" type="int" type-generic-aware="int" value="-1" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="mSurfaceChangedWaiter" static="false" transient="false" type="java.lang.Object" type-generic-aware="java.lang.Object" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageRenderer.1" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageRenderer.2" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageRenderer.3" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageRenderer.4" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageRenderer.5" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoPassTextureSamplingFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoPassTextureSamplingFilter" final="false" name="GPUImageRGBDilationFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageRGBDilationFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageRGBDilationFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageRGBDilationFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageRGBDilationFilter" visibility="public">
        <parameter name="radius" type="int">
        </parameter>
      </constructor>
      <field deprecated="not deprecated" final="true" name="FRAGMENT_SHADER_1" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision highp float;\u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avoid main()\u000a{\u000alowp vec4 centerIntensity = texture2D(inputImageTexture, centerTextureCoordinate);\u000alowp vec4 oneStepPositiveIntensity = texture2D(inputImageTexture, oneStepPositiveTextureCoordinate);\u000alowp vec4 oneStepNegativeIntensity = texture2D(inputImageTexture, oneStepNegativeTextureCoordinate);\u000a\u000alowp vec4 maxValue = max(centerIntensity, oneStepPositiveIntensity);\u000a\u000agl_FragColor = max(maxValue, oneStepNegativeIntensity);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="FRAGMENT_SHADER_2" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision highp float;\u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000avarying vec2 twoStepsPositiveTextureCoordinate;\u000avarying vec2 twoStepsNegativeTextureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avoid main()\u000a{\u000alowp vec4 centerIntensity = texture2D(inputImageTexture, centerTextureCoordinate);\u000alowp vec4 oneStepPositiveIntensity = texture2D(inputImageTexture, oneStepPositiveTextureCoordinate);\u000alowp vec4 oneStepNegativeIntensity = texture2D(inputImageTexture, oneStepNegativeTextureCoordinate);\u000alowp vec4 twoStepsPositiveIntensity = texture2D(inputImageTexture, twoStepsPositiveTextureCoordinate);\u000alowp vec4 twoStepsNegativeIntensity = texture2D(inputImageTexture, twoStepsNegativeTextureCoordinate);\u000a\u000alowp vec4 maxValue = max(centerIntensity, oneStepPositiveIntensity);\u000amaxValue = max(maxValue, oneStepNegativeIntensity);\u000amaxValue = max(maxValue, twoStepsPositiveIntensity);\u000amaxValue = max(maxValue, twoStepsNegativeIntensity);\u000a\u000agl_FragColor = max(maxValue, twoStepsNegativeIntensity);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="FRAGMENT_SHADER_3" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision highp float;\u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000avarying vec2 twoStepsPositiveTextureCoordinate;\u000avarying vec2 twoStepsNegativeTextureCoordinate;\u000avarying vec2 threeStepsPositiveTextureCoordinate;\u000avarying vec2 threeStepsNegativeTextureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avoid main()\u000a{\u000alowp vec4 centerIntensity = texture2D(inputImageTexture, centerTextureCoordinate);\u000alowp vec4 oneStepPositiveIntensity = texture2D(inputImageTexture, oneStepPositiveTextureCoordinate);\u000alowp vec4 oneStepNegativeIntensity = texture2D(inputImageTexture, oneStepNegativeTextureCoordinate);\u000alowp vec4 twoStepsPositiveIntensity = texture2D(inputImageTexture, twoStepsPositiveTextureCoordinate);\u000alowp vec4 twoStepsNegativeIntensity = texture2D(inputImageTexture, twoStepsNegativeTextureCoordinate);\u000alowp vec4 threeStepsPositiveIntensity = texture2D(inputImageTexture, threeStepsPositiveTextureCoordinate);\u000alowp vec4 threeStepsNegativeIntensity = texture2D(inputImageTexture, threeStepsNegativeTextureCoordinate);\u000a\u000alowp vec4 maxValue = max(centerIntensity, oneStepPositiveIntensity);\u000amaxValue = max(maxValue, oneStepNegativeIntensity);\u000amaxValue = max(maxValue, twoStepsPositiveIntensity);\u000amaxValue = max(maxValue, twoStepsNegativeIntensity);\u000amaxValue = max(maxValue, threeStepsPositiveIntensity);\u000a\u000agl_FragColor = max(maxValue, threeStepsNegativeIntensity);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="FRAGMENT_SHADER_4" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision highp float;\u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000avarying vec2 twoStepsPositiveTextureCoordinate;\u000avarying vec2 twoStepsNegativeTextureCoordinate;\u000avarying vec2 threeStepsPositiveTextureCoordinate;\u000avarying vec2 threeStepsNegativeTextureCoordinate;\u000avarying vec2 fourStepsPositiveTextureCoordinate;\u000avarying vec2 fourStepsNegativeTextureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avoid main()\u000a{\u000alowp vec4 centerIntensity = texture2D(inputImageTexture, centerTextureCoordinate);\u000alowp vec4 oneStepPositiveIntensity = texture2D(inputImageTexture, oneStepPositiveTextureCoordinate);\u000alowp vec4 oneStepNegativeIntensity = texture2D(inputImageTexture, oneStepNegativeTextureCoordinate);\u000alowp vec4 twoStepsPositiveIntensity = texture2D(inputImageTexture, twoStepsPositiveTextureCoordinate);\u000alowp vec4 twoStepsNegativeIntensity = texture2D(inputImageTexture, twoStepsNegativeTextureCoordinate);\u000alowp vec4 threeStepsPositiveIntensity = texture2D(inputImageTexture, threeStepsPositiveTextureCoordinate);\u000alowp vec4 threeStepsNegativeIntensity = texture2D(inputImageTexture, threeStepsNegativeTextureCoordinate);\u000alowp vec4 fourStepsPositiveIntensity = texture2D(inputImageTexture, fourStepsPositiveTextureCoordinate);\u000alowp vec4 fourStepsNegativeIntensity = texture2D(inputImageTexture, fourStepsNegativeTextureCoordinate);\u000a\u000alowp vec4 maxValue = max(centerIntensity, oneStepPositiveIntensity);\u000amaxValue = max(maxValue, oneStepNegativeIntensity);\u000amaxValue = max(maxValue, twoStepsPositiveIntensity);\u000amaxValue = max(maxValue, twoStepsNegativeIntensity);\u000amaxValue = max(maxValue, threeStepsPositiveIntensity);\u000amaxValue = max(maxValue, threeStepsNegativeIntensity);\u000amaxValue = max(maxValue, fourStepsPositiveIntensity);\u000a\u000agl_FragColor = max(maxValue, fourStepsNegativeIntensity);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="VERTEX_SHADER_1" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;attribute vec4 position;\u000aattribute vec2 inputTextureCoordinate;\u000a\u000auniform float texelWidthOffset; \u000auniform float texelHeightOffset; \u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000a\u000avoid main()\u000a{\u000agl_Position = position;\u000a\u000avec2 offset = vec2(texelWidthOffset, texelHeightOffset);\u000a\u000acenterTextureCoordinate = inputTextureCoordinate;\u000aoneStepNegativeTextureCoordinate = inputTextureCoordinate - offset;\u000aoneStepPositiveTextureCoordinate = inputTextureCoordinate + offset;\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="VERTEX_SHADER_2" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;attribute vec4 position;\u000aattribute vec2 inputTextureCoordinate;\u000a\u000auniform float texelWidthOffset;\u000auniform float texelHeightOffset;\u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000avarying vec2 twoStepsPositiveTextureCoordinate;\u000avarying vec2 twoStepsNegativeTextureCoordinate;\u000a\u000avoid main()\u000a{\u000agl_Position = position;\u000a\u000avec2 offset = vec2(texelWidthOffset, texelHeightOffset);\u000a\u000acenterTextureCoordinate = inputTextureCoordinate;\u000aoneStepNegativeTextureCoordinate = inputTextureCoordinate - offset;\u000aoneStepPositiveTextureCoordinate = inputTextureCoordinate + offset;\u000atwoStepsNegativeTextureCoordinate = inputTextureCoordinate - (offset * 2.0);\u000atwoStepsPositiveTextureCoordinate = inputTextureCoordinate + (offset * 2.0);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="VERTEX_SHADER_3" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;attribute vec4 position;\u000aattribute vec2 inputTextureCoordinate;\u000a\u000auniform float texelWidthOffset;\u000auniform float texelHeightOffset;\u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000avarying vec2 twoStepsPositiveTextureCoordinate;\u000avarying vec2 twoStepsNegativeTextureCoordinate;\u000avarying vec2 threeStepsPositiveTextureCoordinate;\u000avarying vec2 threeStepsNegativeTextureCoordinate;\u000a\u000avoid main()\u000a{\u000agl_Position = position;\u000a\u000avec2 offset = vec2(texelWidthOffset, texelHeightOffset);\u000a\u000acenterTextureCoordinate = inputTextureCoordinate;\u000aoneStepNegativeTextureCoordinate = inputTextureCoordinate - offset;\u000aoneStepPositiveTextureCoordinate = inputTextureCoordinate + offset;\u000atwoStepsNegativeTextureCoordinate = inputTextureCoordinate - (offset * 2.0);\u000atwoStepsPositiveTextureCoordinate = inputTextureCoordinate + (offset * 2.0);\u000athreeStepsNegativeTextureCoordinate = inputTextureCoordinate - (offset * 3.0);\u000athreeStepsPositiveTextureCoordinate = inputTextureCoordinate + (offset * 3.0);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="VERTEX_SHADER_4" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;attribute vec4 position;\u000aattribute vec2 inputTextureCoordinate;\u000a\u000auniform float texelWidthOffset;\u000auniform float texelHeightOffset;\u000a\u000avarying vec2 centerTextureCoordinate;\u000avarying vec2 oneStepPositiveTextureCoordinate;\u000avarying vec2 oneStepNegativeTextureCoordinate;\u000avarying vec2 twoStepsPositiveTextureCoordinate;\u000avarying vec2 twoStepsNegativeTextureCoordinate;\u000avarying vec2 threeStepsPositiveTextureCoordinate;\u000avarying vec2 threeStepsNegativeTextureCoordinate;\u000avarying vec2 fourStepsPositiveTextureCoordinate;\u000avarying vec2 fourStepsNegativeTextureCoordinate;\u000a\u000avoid main()\u000a{\u000agl_Position = position;\u000a\u000avec2 offset = vec2(texelWidthOffset, texelHeightOffset);\u000a\u000acenterTextureCoordinate = inputTextureCoordinate;\u000aoneStepNegativeTextureCoordinate = inputTextureCoordinate - offset;\u000aoneStepPositiveTextureCoordinate = inputTextureCoordinate + offset;\u000atwoStepsNegativeTextureCoordinate = inputTextureCoordinate - (offset * 2.0);\u000atwoStepsPositiveTextureCoordinate = inputTextureCoordinate + (offset * 2.0);\u000athreeStepsNegativeTextureCoordinate = inputTextureCoordinate - (offset * 3.0);\u000athreeStepsPositiveTextureCoordinate = inputTextureCoordinate + (offset * 3.0);\u000afourStepsNegativeTextureCoordinate = inputTextureCoordinate - (offset * 4.0);\u000afourStepsPositiveTextureCoordinate = inputTextureCoordinate + (offset * 4.0);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageRGBFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageRGBFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageRGBFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageRGBFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageRGBFilter" visibility="public">
        <parameter name="red" type="float">
        </parameter>
        <parameter name="green" type="float">
        </parameter>
        <parameter name="blue" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setBlue" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="blue" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setGreen" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="green" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRed" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="red" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="RGB_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;  varying highp vec2 textureCoordinate;\u000a  \u000a  uniform sampler2D inputImageTexture;\u000a  uniform highp float red;\u000a  uniform highp float green;\u000a  uniform highp float blue;\u000a  \u000a  void main()\u000a  {\u000a      highp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a      \u000a      gl_FragColor = vec4(textureColor.r * red, textureColor.g * green, textureColor.b * blue, 1.0);\u000a  }\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageSaturationBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageSaturationBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSaturationBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="SATURATION_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a \u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a highp float lum(lowp vec3 c) {\u000a     return dot(c, vec3(0.3, 0.59, 0.11));\u000a }\u000a \u000a lowp vec3 clipcolor(lowp vec3 c) {\u000a     highp float l = lum(c);\u000a     lowp float n = min(min(c.r, c.g), c.b);\u000a     lowp float x = max(max(c.r, c.g), c.b);\u000a     \u000a     if (n &lt; 0.0) {\u000a         c.r = l + ((c.r - l) * l) / (l - n);\u000a         c.g = l + ((c.g - l) * l) / (l - n);\u000a         c.b = l + ((c.b - l) * l) / (l - n);\u000a     }\u000a     if (x &gt; 1.0) {\u000a         c.r = l + ((c.r - l) * (1.0 - l)) / (x - l);\u000a         c.g = l + ((c.g - l) * (1.0 - l)) / (x - l);\u000a         c.b = l + ((c.b - l) * (1.0 - l)) / (x - l);\u000a     }\u000a     \u000a     return c;\u000a }\u000a \u000a lowp vec3 setlum(lowp vec3 c, highp float l) {\u000a     highp float d = l - lum(c);\u000a     c = c + vec3(d);\u000a     return clipcolor(c);\u000a }\u000a \u000a highp float sat(lowp vec3 c) {\u000a     lowp float n = min(min(c.r, c.g), c.b);\u000a     lowp float x = max(max(c.r, c.g), c.b);\u000a     return x - n;\u000a }\u000a \u000a lowp float mid(lowp float cmin, lowp float cmid, lowp float cmax, highp float s) {\u000a     return ((cmid - cmin) * s) / (cmax - cmin);\u000a }\u000a \u000a lowp vec3 setsat(lowp vec3 c, highp float s) {\u000a     if (c.r &gt; c.g) {\u000a         if (c.r &gt; c.b) {\u000a             if (c.g &gt; c.b) {\u000a                 /* g is mid, b is min */\u000a                 c.g = mid(c.b, c.g, c.r, s);\u000a                 c.b = 0.0;\u000a             } else {\u000a                 /* b is mid, g is min */\u000a                 c.b = mid(c.g, c.b, c.r, s);\u000a                 c.g = 0.0;\u000a             }\u000a             c.r = s;\u000a         } else {\u000a             /* b is max, r is mid, g is min */\u000a             c.r = mid(c.g, c.r, c.b, s);\u000a             c.b = s;\u000a             c.r = 0.0;\u000a         }\u000a     } else if (c.r &gt; c.b) {\u000a         /* g is max, r is mid, b is min */\u000a         c.r = mid(c.b, c.r, c.g, s);\u000a         c.g = s;\u000a         c.b = 0.0;\u000a     } else if (c.g &gt; c.b) {\u000a         /* g is max, b is mid, r is min */\u000a         c.b = mid(c.r, c.b, c.g, s);\u000a         c.g = s;\u000a         c.r = 0.0;\u000a     } else if (c.b &gt; c.g) {\u000a         /* b is max, g is mid, r is min */\u000a         c.g = mid(c.r, c.g, c.b, s);\u000a         c.b = s;\u000a         c.r = 0.0;\u000a     } else {\u000a         c = vec3(0.0);\u000a     }\u000a     return c;\u000a }\u000a \u000a void main()\u000a {\u000a   highp vec4 baseColor = texture2D(inputImageTexture, textureCoordinate);\u000a   highp vec4 overlayColor = texture2D(inputImageTexture2, textureCoordinate2);\u000a     \u000a     gl_FragColor = vec4(baseColor.rgb * (1.0 - overlayColor.a) + setlum(setsat(baseColor.rgb, sat(overlayColor.rgb)), lum(baseColor.rgb)) * overlayColor.a, baseColor.a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageSaturationFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageSaturationFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSaturationFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageSaturationFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSaturationFilter" visibility="public">
        <parameter name="saturation" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setSaturation" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="saturation" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="SATURATION_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot; varying highp vec2 textureCoordinate;\u000a \u000a uniform sampler2D inputImageTexture;\u000a uniform lowp float saturation;\u000a \u000a // Values from \&quot;Graphics Shaders: Theory and Practice\&quot; by Bailey and Cunningham\u000a const mediump vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);\u000a \u000a void main()\u000a {\u000a    lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a    lowp float luminance = dot(textureColor.rgb, luminanceWeighting);\u000a    lowp vec3 greyScaleColor = vec3(luminance);\u000a    \u000a    gl_FragColor = vec4(mix(greyScaleColor, textureColor.rgb, saturation), textureColor.w);\u000a     \u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageScreenBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageScreenBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageScreenBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="SCREEN_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a     mediump vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a     mediump vec4 textureColor2 = texture2D(inputImageTexture2, textureCoordinate2);\u000a     mediump vec4 whiteColor = vec4(1.0);\u000a     gl_FragColor = whiteColor - ((whiteColor - textureColor2) * (whiteColor - textureColor));\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageColorMatrixFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageColorMatrixFilter" final="false" name="GPUImageSepiaFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageSepiaFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSepiaFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageSepiaFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSepiaFilter" visibility="public">
        <parameter name="intensity" type="float">
        </parameter>
      </constructor>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageSharpenFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageSharpenFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSharpenFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageSharpenFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSharpenFilter" visibility="public">
        <parameter name="sharpness" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setSharpness" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="sharpness" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="SHARPEN_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision highp float;\u000a\u000avarying highp vec2 textureCoordinate;\u000avarying highp vec2 leftTextureCoordinate;\u000avarying highp vec2 rightTextureCoordinate; \u000avarying highp vec2 topTextureCoordinate;\u000avarying highp vec2 bottomTextureCoordinate;\u000a\u000avarying highp float centerMultiplier;\u000avarying highp float edgeMultiplier;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avoid main()\u000a{\u000a    mediump vec3 textureColor = texture2D(inputImageTexture, textureCoordinate).rgb;\u000a    mediump vec3 leftTextureColor = texture2D(inputImageTexture, leftTextureCoordinate).rgb;\u000a    mediump vec3 rightTextureColor = texture2D(inputImageTexture, rightTextureCoordinate).rgb;\u000a    mediump vec3 topTextureColor = texture2D(inputImageTexture, topTextureCoordinate).rgb;\u000a    mediump vec3 bottomTextureColor = texture2D(inputImageTexture, bottomTextureCoordinate).rgb;\u000a\u000a    gl_FragColor = vec4((textureColor * centerMultiplier - (leftTextureColor * edgeMultiplier + rightTextureColor * edgeMultiplier + topTextureColor * edgeMultiplier + bottomTextureColor * edgeMultiplier)), texture2D(inputImageTexture, bottomTextureCoordinate).w);\u000a}&quot;" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="SHARPEN_VERTEX_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;attribute vec4 position;\u000aattribute vec4 inputTextureCoordinate;\u000a\u000auniform float imageWidthFactor; \u000auniform float imageHeightFactor; \u000auniform float sharpness;\u000a\u000avarying vec2 textureCoordinate;\u000avarying vec2 leftTextureCoordinate;\u000avarying vec2 rightTextureCoordinate; \u000avarying vec2 topTextureCoordinate;\u000avarying vec2 bottomTextureCoordinate;\u000a\u000avarying float centerMultiplier;\u000avarying float edgeMultiplier;\u000a\u000avoid main()\u000a{\u000a    gl_Position = position;\u000a    \u000a    mediump vec2 widthStep = vec2(imageWidthFactor, 0.0);\u000a    mediump vec2 heightStep = vec2(0.0, imageHeightFactor);\u000a    \u000a    textureCoordinate = inputTextureCoordinate.xy;\u000a    leftTextureCoordinate = inputTextureCoordinate.xy - widthStep;\u000a    rightTextureCoordinate = inputTextureCoordinate.xy + widthStep;\u000a    topTextureCoordinate = inputTextureCoordinate.xy + heightStep;     \u000a    bottomTextureCoordinate = inputTextureCoordinate.xy - heightStep;\u000a    \u000a    centerMultiplier = 1.0 + 4.0 * sharpness;\u000a    edgeMultiplier = sharpness;\u000a}&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup" final="false" name="GPUImageSketchFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageSketchFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSketchFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="SKETCH_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision mediump float;\u000a\u000avarying vec2 textureCoordinate;\u000avarying vec2 leftTextureCoordinate;\u000avarying vec2 rightTextureCoordinate;\u000a\u000avarying vec2 topTextureCoordinate;\u000avarying vec2 topLeftTextureCoordinate;\u000avarying vec2 topRightTextureCoordinate;\u000a\u000avarying vec2 bottomTextureCoordinate;\u000avarying vec2 bottomLeftTextureCoordinate;\u000avarying vec2 bottomRightTextureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avoid main()\u000a{\u000afloat bottomLeftIntensity = texture2D(inputImageTexture, bottomLeftTextureCoordinate).r;\u000afloat topRightIntensity = texture2D(inputImageTexture, topRightTextureCoordinate).r;\u000afloat topLeftIntensity = texture2D(inputImageTexture, topLeftTextureCoordinate).r;\u000afloat bottomRightIntensity = texture2D(inputImageTexture, bottomRightTextureCoordinate).r;\u000afloat leftIntensity = texture2D(inputImageTexture, leftTextureCoordinate).r;\u000afloat rightIntensity = texture2D(inputImageTexture, rightTextureCoordinate).r;\u000afloat bottomIntensity = texture2D(inputImageTexture, bottomTextureCoordinate).r;\u000afloat topIntensity = texture2D(inputImageTexture, topTextureCoordinate).r;\u000afloat h = -topLeftIntensity - 2.0 * topIntensity - topRightIntensity + bottomLeftIntensity + 2.0 * bottomIntensity + bottomRightIntensity;\u000afloat v = -bottomLeftIntensity - 2.0 * leftIntensity - topLeftIntensity + bottomRightIntensity + 2.0 * rightIntensity + topRightIntensity;\u000a\u000afloat mag = 1.0 - length(vec2(h, v));\u000a\u000agl_FragColor = vec4(vec3(mag), 1.0);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup" final="false" name="GPUImageSmoothToonFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageSmoothToonFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSmoothToonFilter" visibility="public">
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setBlurSize" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="value" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setQuantizationLevels" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="value" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setTexelHeight" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="value" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setTexelWidth" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="value" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setThreshold" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="value" type="float">
        </parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup" final="false" name="GPUImageSobelEdgeDetection" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageSobelEdgeDetection" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSobelEdgeDetection" visibility="public">
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setLineSize" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="size" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="SOBEL_EDGE_DETECTION" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision mediump float;\u000a\u000avarying vec2 textureCoordinate;\u000avarying vec2 leftTextureCoordinate;\u000avarying vec2 rightTextureCoordinate;\u000a\u000avarying vec2 topTextureCoordinate;\u000avarying vec2 topLeftTextureCoordinate;\u000avarying vec2 topRightTextureCoordinate;\u000a\u000avarying vec2 bottomTextureCoordinate;\u000avarying vec2 bottomLeftTextureCoordinate;\u000avarying vec2 bottomRightTextureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avoid main()\u000a{\u000a    float bottomLeftIntensity = texture2D(inputImageTexture, bottomLeftTextureCoordinate).r;\u000a    float topRightIntensity = texture2D(inputImageTexture, topRightTextureCoordinate).r;\u000a    float topLeftIntensity = texture2D(inputImageTexture, topLeftTextureCoordinate).r;\u000a    float bottomRightIntensity = texture2D(inputImageTexture, bottomRightTextureCoordinate).r;\u000a    float leftIntensity = texture2D(inputImageTexture, leftTextureCoordinate).r;\u000a    float rightIntensity = texture2D(inputImageTexture, rightTextureCoordinate).r;\u000a    float bottomIntensity = texture2D(inputImageTexture, bottomTextureCoordinate).r;\u000a    float topIntensity = texture2D(inputImageTexture, topTextureCoordinate).r;\u000a    float h = -topLeftIntensity - 2.0 * topIntensity - topRightIntensity + bottomLeftIntensity + 2.0 * bottomIntensity + bottomRightIntensity;\u000a    float v = -bottomLeftIntensity - 2.0 * leftIntensity - topLeftIntensity + bottomRightIntensity + 2.0 * rightIntensity + topRightIntensity;\u000a\u000a    float mag = length(vec2(h, v));\u000a\u000a    gl_FragColor = vec4(vec3(mag), 1.0);\u000a}&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" final="false" name="GPUImageSobelThresholdFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageSobelThresholdFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSobelThresholdFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageSobelThresholdFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSobelThresholdFilter" visibility="public">
        <parameter name="threshold" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setThreshold" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="threshold" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="SOBEL_THRESHOLD_EDGE_DETECTION" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision mediump float;\u000a\u000avarying vec2 textureCoordinate;\u000avarying vec2 leftTextureCoordinate;\u000avarying vec2 rightTextureCoordinate;\u000a\u000avarying vec2 topTextureCoordinate;\u000avarying vec2 topLeftTextureCoordinate;\u000avarying vec2 topRightTextureCoordinate;\u000a\u000avarying vec2 bottomTextureCoordinate;\u000avarying vec2 bottomLeftTextureCoordinate;\u000avarying vec2 bottomRightTextureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000auniform lowp float threshold;\u000a\u000aconst highp vec3 W = vec3(0.2125, 0.7154, 0.0721);\u000a\u000avoid main()\u000a{\u000a    float bottomLeftIntensity = texture2D(inputImageTexture, bottomLeftTextureCoordinate).r;\u000a    float topRightIntensity = texture2D(inputImageTexture, topRightTextureCoordinate).r;\u000a    float topLeftIntensity = texture2D(inputImageTexture, topLeftTextureCoordinate).r;\u000a    float bottomRightIntensity = texture2D(inputImageTexture, bottomRightTextureCoordinate).r;\u000a    float leftIntensity = texture2D(inputImageTexture, leftTextureCoordinate).r;\u000a    float rightIntensity = texture2D(inputImageTexture, rightTextureCoordinate).r;\u000a    float bottomIntensity = texture2D(inputImageTexture, bottomTextureCoordinate).r;\u000a    float topIntensity = texture2D(inputImageTexture, topTextureCoordinate).r;\u000a    float h = -topLeftIntensity - 2.0 * topIntensity - topRightIntensity + bottomLeftIntensity + 2.0 * bottomIntensity + bottomRightIntensity;\u000a    float v = -bottomLeftIntensity - 2.0 * leftIntensity - topLeftIntensity + bottomRightIntensity + 2.0 * rightIntensity + topRightIntensity;\u000a\u000a    float mag = 1.0 - length(vec2(h, v));\u000a    mag = step(threshold, mag);\u000a\u000a    gl_FragColor = vec4(vec3(mag), 1.0);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageSoftLightBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageSoftLightBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSoftLightBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="SOFT_LIGHT_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a     mediump vec4 base = texture2D(inputImageTexture, textureCoordinate);\u000a     mediump vec4 overlay = texture2D(inputImageTexture2, textureCoordinate2);\u000a     \u000a     gl_FragColor = base * (overlay.a * (base / base.a) + (2.0 * overlay * (1.0 - (base / base.a)))) + overlay * (1.0 - base.a) + base * (1.0 - overlay.a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageSourceOverBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageSourceOverBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSourceOverBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="SOURCE_OVER_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a \u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a   lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a   lowp vec4 textureColor2 = texture2D(inputImageTexture2, textureCoordinate2);\u000a   \u000a   gl_FragColor = mix(textureColor, textureColor2, textureColor2.a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageSphereRefractionFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageSphereRefractionFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSphereRefractionFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageSphereRefractionFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSphereRefractionFilter" visibility="public">
        <parameter name="center" type="android.graphics.PointF">
        </parameter>
        <parameter name="radius" type="float">
        </parameter>
        <parameter name="refractiveIndex" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setCenter" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="center" type="android.graphics.PointF">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRadius" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="radius" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRefractiveIndex" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="refractiveIndex" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="SPHERE_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000auniform highp vec2 center;\u000auniform highp float radius;\u000auniform highp float aspectRatio;\u000auniform highp float refractiveIndex;\u000a\u000avoid main()\u000a{\u000ahighp vec2 textureCoordinateToUse = vec2(textureCoordinate.x, (textureCoordinate.y * aspectRatio + 0.5 - 0.5 * aspectRatio));\u000ahighp float distanceFromCenter = distance(center, textureCoordinateToUse);\u000alowp float checkForPresenceWithinSphere = step(distanceFromCenter, radius);\u000a\u000adistanceFromCenter = distanceFromCenter / radius;\u000a\u000ahighp float normalizedDepth = radius * sqrt(1.0 - distanceFromCenter * distanceFromCenter);\u000ahighp vec3 sphereNormal = normalize(vec3(textureCoordinateToUse - center, normalizedDepth));\u000a\u000ahighp vec3 refractedVector = refract(vec3(0.0, 0.0, -1.0), sphereNormal, refractiveIndex);\u000a\u000agl_FragColor = texture2D(inputImageTexture, (refractedVector.xy + 1.0) * 0.5) * checkForPresenceWithinSphere;     \u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" final="false" name="GPUImageSubtractBlendFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageSubtractBlendFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSubtractBlendFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="SUBTRACT_BLEND_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a varying highp vec2 textureCoordinate2;\u000a\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D inputImageTexture2;\u000a \u000a void main()\u000a {\u000a   lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a   lowp vec4 textureColor2 = texture2D(inputImageTexture2, textureCoordinate2);\u000a\u000a   gl_FragColor = vec4(textureColor.rgb - textureColor2.rgb, textureColor.a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageSwirlFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageSwirlFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSwirlFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageSwirlFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageSwirlFilter" visibility="public">
        <parameter name="radius" type="float">
        </parameter>
        <parameter name="angle" type="float">
        </parameter>
        <parameter name="center" type="android.graphics.PointF">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setAngle" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="angle" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setCenter" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="center" type="android.graphics.PointF">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRadius" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="radius" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="SWIRL_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;varying highp vec2 textureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000auniform highp vec2 center;\u000auniform highp float radius;\u000auniform highp float angle;\u000a\u000avoid main()\u000a{\u000ahighp vec2 textureCoordinateToUse = textureCoordinate;\u000ahighp float dist = distance(center, textureCoordinate);\u000aif (dist &lt; radius)\u000a{\u000atextureCoordinateToUse -= center;\u000ahighp float percent = (radius - dist) / radius;\u000ahighp float theta = percent * percent * angle * 8.0;\u000ahighp float s = sin(theta);\u000ahighp float c = cos(theta);\u000atextureCoordinateToUse = vec2(dot(textureCoordinateToUse, vec2(c, -s)), dot(textureCoordinateToUse, vec2(s, c)));\u000atextureCoordinateToUse += center;\u000a}\u000a\u000agl_FragColor = texture2D(inputImageTexture, textureCoordinateToUse );\u000a\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup" final="false" name="GPUImageThresholdEdgeDetection" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageThresholdEdgeDetection" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageThresholdEdgeDetection" visibility="public">
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setLineSize" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="size" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setThreshold" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="threshold" type="float">
        </parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageToneCurveFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageToneCurveFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageToneCurveFilter" visibility="public">
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setBlueControlPoints" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="points" type="android.graphics.PointF[]">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setFromCurveFileInputStream" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="input" type="java.io.InputStream">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setGreenControlPoints" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="points" type="android.graphics.PointF[]">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRedControlPoints" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="points" type="android.graphics.PointF[]">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRgbCompositeControlPoints" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="points" type="android.graphics.PointF[]">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="TONE_CURVE_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot; varying highp vec2 textureCoordinate;\u000a uniform sampler2D inputImageTexture;\u000a uniform sampler2D toneCurveTexture;\u000a\u000a void main()\u000a {\u000a     lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a     lowp float redCurveValue = texture2D(toneCurveTexture, vec2(textureColor.r, 0.0)).r;\u000a     lowp float greenCurveValue = texture2D(toneCurveTexture, vec2(textureColor.g, 0.0)).g;\u000a     lowp float blueCurveValue = texture2D(toneCurveTexture, vec2(textureColor.b, 0.0)).b;\u000a\u000a     gl_FragColor = vec4(redCurveValue, greenCurveValue, blueCurveValue, textureColor.a);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageToneCurveFilter.1" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageToneCurveFilter.2" static="false" visibility="">
      <implements name="java.util.Comparator" name-generic-aware="java.util.Comparator&lt;android.graphics.PointF&gt;">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="compare" native="false" return="int" static="false" synchronized="false" visibility="public">
        <parameter name="point1" type="android.graphics.PointF">
        </parameter>
        <parameter name="point2" type="android.graphics.PointF">
        </parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" final="false" name="GPUImageToonFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageToonFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageToonFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageToonFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageToonFilter" visibility="public">
        <parameter name="threshold" type="float">
        </parameter>
        <parameter name="quantizationLevels" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setQuantizationLevels" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="quantizationLevels" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setThreshold" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="threshold" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="TOON_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision highp float;\u000a\u000avarying vec2 textureCoordinate;\u000avarying vec2 leftTextureCoordinate;\u000avarying vec2 rightTextureCoordinate;\u000a\u000avarying vec2 topTextureCoordinate;\u000avarying vec2 topLeftTextureCoordinate;\u000avarying vec2 topRightTextureCoordinate;\u000a\u000avarying vec2 bottomTextureCoordinate;\u000avarying vec2 bottomLeftTextureCoordinate;\u000avarying vec2 bottomRightTextureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000auniform highp float intensity;\u000auniform highp float threshold;\u000auniform highp float quantizationLevels;\u000a\u000aconst highp vec3 W = vec3(0.2125, 0.7154, 0.0721);\u000a\u000avoid main()\u000a{\u000avec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\u000a\u000afloat bottomLeftIntensity = texture2D(inputImageTexture, bottomLeftTextureCoordinate).r;\u000afloat topRightIntensity = texture2D(inputImageTexture, topRightTextureCoordinate).r;\u000afloat topLeftIntensity = texture2D(inputImageTexture, topLeftTextureCoordinate).r;\u000afloat bottomRightIntensity = texture2D(inputImageTexture, bottomRightTextureCoordinate).r;\u000afloat leftIntensity = texture2D(inputImageTexture, leftTextureCoordinate).r;\u000afloat rightIntensity = texture2D(inputImageTexture, rightTextureCoordinate).r;\u000afloat bottomIntensity = texture2D(inputImageTexture, bottomTextureCoordinate).r;\u000afloat topIntensity = texture2D(inputImageTexture, topTextureCoordinate).r;\u000afloat h = -topLeftIntensity - 2.0 * topIntensity - topRightIntensity + bottomLeftIntensity + 2.0 * bottomIntensity + bottomRightIntensity;\u000afloat v = -bottomLeftIntensity - 2.0 * leftIntensity - topLeftIntensity + bottomRightIntensity + 2.0 * rightIntensity + topRightIntensity;\u000a\u000afloat mag = length(vec2(h, v));\u000a\u000avec3 posterizedImageColor = floor((textureColor.rgb * quantizationLevels) + 0.5) / quantizationLevels;\u000a\u000afloat thresholdTest = 1.0 - step(threshold, mag);\u000a\u000agl_FragColor = vec4(posterizedImageColor * thresholdTest, textureColor.a);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageTwoInputFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageTwoInputFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" visibility="public">
        <parameter name="fragmentShader" type="java.lang.String">
        </parameter>
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageTwoInputFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageTwoInputFilter" visibility="public">
        <parameter name="vertexShader" type="java.lang.String">
        </parameter>
        <parameter name="fragmentShader" type="java.lang.String">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="getBitmap" native="false" return="android.graphics.Bitmap" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="recycleBitmap" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setBitmap" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="bitmap" type="android.graphics.Bitmap">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRotation" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="rotation" type="jp.co.cyberagent.android.gpuimage.Rotation">
        </parameter>
        <parameter name="flipHorizontal" type="boolean">
        </parameter>
        <parameter name="flipVertical" type="boolean">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="false" name="mFilterInputTextureUniform2" static="false" transient="false" type="int" type-generic-aware="int" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="false" name="mFilterSecondTextureCoordinateAttribute" static="false" transient="false" type="int" type-generic-aware="int" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="false" name="mFilterSourceTexture2" static="false" transient="false" type="int" type-generic-aware="int" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageTwoInputFilter.1" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilterGroup" final="false" name="GPUImageTwoPassFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageTwoPassFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageTwoPassFilter" visibility="public">
        <parameter name="firstVertexShader" type="java.lang.String">
        </parameter>
        <parameter name="firstFragmentShader" type="java.lang.String">
        </parameter>
        <parameter name="secondVertexShader" type="java.lang.String">
        </parameter>
        <parameter name="secondFragmentShader" type="java.lang.String">
        </parameter>
      </constructor>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageTwoPassFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageTwoPassFilter" final="false" name="GPUImageTwoPassTextureSamplingFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageTwoPassTextureSamplingFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageTwoPassTextureSamplingFilter" visibility="public">
        <parameter name="firstVertexShader" type="java.lang.String">
        </parameter>
        <parameter name="firstFragmentShader" type="java.lang.String">
        </parameter>
        <parameter name="secondVertexShader" type="java.lang.String">
        </parameter>
        <parameter name="secondFragmentShader" type="java.lang.String">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="getHorizontalTexelOffsetRatio" native="false" return="float" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getVerticalTexelOffsetRatio" native="false" return="float" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="initTexelOffsets" native="false" return="void" static="false" synchronized="false" visibility="protected">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="android.widget.FrameLayout" extends-generic-aware="android.widget.FrameLayout" final="false" name="GPUImageView" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageView" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageView" visibility="public">
        <parameter name="context" type="android.content.Context">
        </parameter>
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageView" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageView" visibility="public">
        <parameter name="context" type="android.content.Context">
        </parameter>
        <parameter name="attrs" type="android.util.AttributeSet">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="capture" native="false" return="android.graphics.Bitmap" static="false" synchronized="false" visibility="public">
        <exception name="InterruptedException" type="java.lang.InterruptedException">
        </exception>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="capture" native="false" return="android.graphics.Bitmap" static="false" synchronized="false" visibility="public">
        <parameter name="width" type="int">
        </parameter>
        <parameter name="height" type="int">
        </parameter>
        <exception name="InterruptedException" type="java.lang.InterruptedException">
        </exception>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getFilter" native="false" return="jp.co.cyberagent.android.gpuimage.GPUImageFilter" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getGPUImage" native="false" return="jp.co.cyberagent.android.gpuimage.GPUImage" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onPause" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="onResume" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="requestRender" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="saveToPictures" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="folderName" type="java.lang.String">
        </parameter>
        <parameter name="fileName" type="java.lang.String">
        </parameter>
        <parameter name="width" type="int">
        </parameter>
        <parameter name="height" type="int">
        </parameter>
        <parameter name="listener" type="jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="saveToPictures" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="folderName" type="java.lang.String">
        </parameter>
        <parameter name="fileName" type="java.lang.String">
        </parameter>
        <parameter name="listener" type="jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setFilter" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="filter" type="jp.co.cyberagent.android.gpuimage.GPUImageFilter">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setImage" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="bitmap" type="android.graphics.Bitmap">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setImage" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="uri" type="android.net.Uri">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setImage" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="file" type="java.io.File">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRatio" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="ratio" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRotation" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="rotation" type="jp.co.cyberagent.android.gpuimage.Rotation">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setScaleType" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="scaleType" type="jp.co.cyberagent.android.gpuimage.GPUImage.ScaleType">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="false" name="mForceSize" static="false" transient="false" type="jp.co.cyberagent.android.gpuimage.GPUImageView.Size" type-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageView.Size" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageView.1" static="false" visibility="">
      <implements name="android.view.ViewTreeObserver.OnGlobalLayoutListener" name-generic-aware="android.view.ViewTreeObserver.OnGlobalLayoutListener">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="onGlobalLayout" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageView.2" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageView.3" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageView.4" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageView.5" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageView.6" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="android.opengl.GLSurfaceView" extends-generic-aware="android.opengl.GLSurfaceView" final="false" name="GPUImageView.GPUImageGLSurfaceView" static="false" visibility="private">
      <constructor deprecated="not deprecated" final="false" name="GPUImageView.GPUImageGLSurfaceView" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageView.GPUImageGLSurfaceView" visibility="public">
        <parameter name="context" type="android.content.Context">
        </parameter>
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageView.GPUImageGLSurfaceView" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageView.GPUImageGLSurfaceView" visibility="public">
        <parameter name="context" type="android.content.Context">
        </parameter>
        <parameter name="attrs" type="android.util.AttributeSet">
        </parameter>
      </constructor>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="android.widget.FrameLayout" extends-generic-aware="android.widget.FrameLayout" final="false" name="GPUImageView.LoadingView" static="false" visibility="private">
      <constructor deprecated="not deprecated" final="false" name="GPUImageView.LoadingView" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageView.LoadingView" visibility="public">
        <parameter name="context" type="android.content.Context">
        </parameter>
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageView.LoadingView" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageView.LoadingView" visibility="public">
        <parameter name="context" type="android.content.Context">
        </parameter>
        <parameter name="attrs" type="android.util.AttributeSet">
        </parameter>
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageView.LoadingView" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageView.LoadingView" visibility="public">
        <parameter name="context" type="android.content.Context">
        </parameter>
        <parameter name="attrs" type="android.util.AttributeSet">
        </parameter>
        <parameter name="defStyle" type="int">
        </parameter>
      </constructor>
    </class>
    <interface abstract="true" deprecated="not deprecated" final="false" name="GPUImageView.OnPictureSavedListener" static="true" visibility="public">
      <method abstract="true" deprecated="not deprecated" final="false" name="onPictureSaved" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="p0" type="android.net.Uri">
        </parameter>
      </method>
    </interface>
    <class abstract="false" deprecated="not deprecated" extends="android.os.AsyncTask" extends-generic-aware="android.os.AsyncTask&lt;java.lang.Void, java.lang.Void, java.lang.Void&gt;" final="false" name="GPUImageView.SaveTask" static="false" visibility="private">
      <constructor deprecated="not deprecated" final="false" name="GPUImageView.SaveTask" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageView.SaveTask" visibility="public">
        <parameter name="folderName" type="java.lang.String">
        </parameter>
        <parameter name="fileName" type="java.lang.String">
        </parameter>
        <parameter name="width" type="int">
        </parameter>
        <parameter name="height" type="int">
        </parameter>
        <parameter name="listener" type="jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener">
        </parameter>
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageView.SaveTask" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageView.SaveTask" visibility="public">
        <parameter name="folderName" type="java.lang.String">
        </parameter>
        <parameter name="fileName" type="java.lang.String">
        </parameter>
        <parameter name="listener" type="jp.co.cyberagent.android.gpuimage.GPUImageView.OnPictureSavedListener">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="doInBackground" native="false" return="java.lang.Void" static="false" synchronized="false" visibility="protected">
        <parameter name="params" type="java.lang.Void...">
        </parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageView.SaveTask.1" static="false" visibility="">
      <implements name="android.media.MediaScannerConnection.OnScanCompletedListener" name-generic-aware="android.media.MediaScannerConnection.OnScanCompletedListener">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="onScanCompleted" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="path" type="java.lang.String">
        </parameter>
        <parameter name="uri" type="android.net.Uri">
        </parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageView.SaveTask.1.1" static="false" visibility="">
      <implements name="java.lang.Runnable" name-generic-aware="java.lang.Runnable">
      </implements>
      <method abstract="false" deprecated="not deprecated" final="false" name="run" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="GPUImageView.Size" static="true" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageView.Size" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageView.Size" visibility="public">
        <parameter name="width" type="int">
        </parameter>
        <parameter name="height" type="int">
        </parameter>
      </constructor>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageVignetteFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageVignetteFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageVignetteFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageVignetteFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageVignetteFilter" visibility="public">
        <parameter name="vignetteCenter" type="android.graphics.PointF">
        </parameter>
        <parameter name="vignetteColor" type="float[]">
        </parameter>
        <parameter name="vignetteStart" type="float">
        </parameter>
        <parameter name="vignetteEnd" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setVignetteCenter" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="vignetteCenter" type="android.graphics.PointF">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setVignetteColor" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="vignetteColor" type="float[]">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setVignetteEnd" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="vignetteEnd" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setVignetteStart" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="vignetteStart" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="VIGNETTING_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot; uniform sampler2D inputImageTexture;\u000a varying highp vec2 textureCoordinate;\u000a \u000a uniform lowp vec2 vignetteCenter;\u000a uniform lowp vec3 vignetteColor;\u000a uniform highp float vignetteStart;\u000a uniform highp float vignetteEnd;\u000a \u000a void main()\u000a {\u000a     /*\u000a     lowp vec3 rgb = texture2D(inputImageTexture, textureCoordinate).rgb;\u000a     lowp float d = distance(textureCoordinate, vec2(0.5,0.5));\u000a     rgb *= (1.0 - smoothstep(vignetteStart, vignetteEnd, d));\u000a     gl_FragColor = vec4(vec3(rgb),1.0);\u000a      */\u000a     \u000a     lowp vec3 rgb = texture2D(inputImageTexture, textureCoordinate).rgb;\u000a     lowp float d = distance(textureCoordinate, vec2(vignetteCenter.x, vignetteCenter.y));\u000a     lowp float percent = smoothstep(vignetteStart, vignetteEnd, d);\u000a     gl_FragColor = vec4(mix(rgb.x, vignetteColor.x, percent), mix(rgb.y, vignetteColor.y, percent), mix(rgb.z, vignetteColor.z, percent), 1.0);\u000a }&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImage3x3TextureSamplingFilter" final="false" name="GPUImageWeakPixelInclusionFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageWeakPixelInclusionFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageWeakPixelInclusionFilter" visibility="public">
      </constructor>
      <field deprecated="not deprecated" final="true" name="WEAKPIXEL_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;precision lowp float;\u000a\u000avarying vec2 textureCoordinate;\u000avarying vec2 leftTextureCoordinate;\u000avarying vec2 rightTextureCoordinate;\u000a\u000avarying vec2 topTextureCoordinate;\u000avarying vec2 topLeftTextureCoordinate;\u000avarying vec2 topRightTextureCoordinate;\u000a\u000avarying vec2 bottomTextureCoordinate;\u000avarying vec2 bottomLeftTextureCoordinate;\u000avarying vec2 bottomRightTextureCoordinate;\u000a\u000auniform sampler2D inputImageTexture;\u000a\u000avoid main()\u000a{\u000afloat bottomLeftIntensity = texture2D(inputImageTexture, bottomLeftTextureCoordinate).r;\u000afloat topRightIntensity = texture2D(inputImageTexture, topRightTextureCoordinate).r;\u000afloat topLeftIntensity = texture2D(inputImageTexture, topLeftTextureCoordinate).r;\u000afloat bottomRightIntensity = texture2D(inputImageTexture, bottomRightTextureCoordinate).r;\u000afloat leftIntensity = texture2D(inputImageTexture, leftTextureCoordinate).r;\u000afloat rightIntensity = texture2D(inputImageTexture, rightTextureCoordinate).r;\u000afloat bottomIntensity = texture2D(inputImageTexture, bottomTextureCoordinate).r;\u000afloat topIntensity = texture2D(inputImageTexture, topTextureCoordinate).r;\u000afloat centerIntensity = texture2D(inputImageTexture, textureCoordinate).r;\u000a\u000afloat pixelIntensitySum = bottomLeftIntensity + topRightIntensity + topLeftIntensity + bottomRightIntensity + leftIntensity + rightIntensity + bottomIntensity + topIntensity + centerIntensity;\u000afloat sumTest = step(1.5, pixelIntensitySum);\u000afloat pixelTest = step(0.01, centerIntensity);\u000a\u000agl_FragColor = vec4(vec3(sumTest * pixelTest), 1.0);\u000a}\u000a&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="jp.co.cyberagent.android.gpuimage.GPUImageFilter" extends-generic-aware="jp.co.cyberagent.android.gpuimage.GPUImageFilter" final="false" name="GPUImageWhiteBalanceFilter" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="GPUImageWhiteBalanceFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageWhiteBalanceFilter" visibility="public">
      </constructor>
      <constructor deprecated="not deprecated" final="false" name="GPUImageWhiteBalanceFilter" static="false" type="jp.co.cyberagent.android.gpuimage.GPUImageWhiteBalanceFilter" visibility="public">
        <parameter name="temperature" type="float">
        </parameter>
        <parameter name="tint" type="float">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="setTemperature" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="temperature" type="float">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setTint" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="tint" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="WHITE_BALANCE_FRAGMENT_SHADER" static="true" transient="false" type="java.lang.String" type-generic-aware="java.lang.String" value="&quot;uniform sampler2D inputImageTexture;\u000avarying highp vec2 textureCoordinate;\u000a \u000auniform lowp float temperature;\u000auniform lowp float tint;\u000a\u000aconst lowp vec3 warmFilter = vec3(0.93, 0.54, 0.0);\u000a\u000aconst mediump mat3 RGBtoYIQ = mat3(0.299, 0.587, 0.114, 0.596, -0.274, -0.322, 0.212, -0.523, 0.311);\u000aconst mediump mat3 YIQtoRGB = mat3(1.0, 0.956, 0.621, 1.0, -0.272, -0.647, 1.0, -1.105, 1.702);\u000a\u000avoid main()\u000a{\u000a\u0009lowp vec4 source = texture2D(inputImageTexture, textureCoordinate);\u000a\u0009\u000a\u0009mediump vec3 yiq = RGBtoYIQ * source.rgb; //adjusting tint\u000a\u0009yiq.b = clamp(yiq.b + tint*0.5226*0.1, -0.5226, 0.5226);\u000a\u0009lowp vec3 rgb = YIQtoRGB * yiq;\u000a\u000a\u0009lowp vec3 processed = vec3(\u000a\u0009\u0009(rgb.r &lt; 0.5 ? (2.0 * rgb.r * warmFilter.r) : (1.0 - 2.0 * (1.0 - rgb.r) * (1.0 - warmFilter.r))), //adjusting temperature\u000a\u0009\u0009(rgb.g &lt; 0.5 ? (2.0 * rgb.g * warmFilter.g) : (1.0 - 2.0 * (1.0 - rgb.g) * (1.0 - warmFilter.g))), \u000a\u0009\u0009(rgb.b &lt; 0.5 ? (2.0 * rgb.b * warmFilter.b) : (1.0 - 2.0 * (1.0 - rgb.b) * (1.0 - warmFilter.b))));\u000a\u000a\u0009gl_FragColor = vec4(mix(rgb, processed, temperature), source.a);\u000a}&quot;" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="OpenGlUtils" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="OpenGlUtils" static="false" type="jp.co.cyberagent.android.gpuimage.OpenGlUtils" visibility="public">
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="loadProgram" native="false" return="int" static="true" synchronized="false" visibility="public">
        <parameter name="strVSource" type="java.lang.String">
        </parameter>
        <parameter name="strFSource" type="java.lang.String">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="loadShader" native="false" return="int" static="true" synchronized="false" visibility="public">
        <parameter name="strSource" type="java.lang.String">
        </parameter>
        <parameter name="iType" type="int">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="loadTexture" native="false" return="int" static="true" synchronized="false" visibility="public">
        <parameter name="img" type="android.graphics.Bitmap">
        </parameter>
        <parameter name="usedTexId" type="int">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="loadTexture" native="false" return="int" static="true" synchronized="false" visibility="public">
        <parameter name="img" type="android.graphics.Bitmap">
        </parameter>
        <parameter name="usedTexId" type="int">
        </parameter>
        <parameter name="recycle" type="boolean">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="loadTexture" native="false" return="int" static="true" synchronized="false" visibility="public">
        <parameter name="data" type="java.nio.IntBuffer">
        </parameter>
        <parameter name="size" type="android.hardware.Camera.Size">
        </parameter>
        <parameter name="usedTexId" type="int">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="loadTextureAsBitmap" native="false" return="int" static="true" synchronized="false" visibility="public">
        <parameter name="data" type="java.nio.IntBuffer">
        </parameter>
        <parameter name="size" type="android.hardware.Camera.Size">
        </parameter>
        <parameter name="usedTexId" type="int">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="rnd" native="false" return="float" static="true" synchronized="false" visibility="public">
        <parameter name="min" type="float">
        </parameter>
        <parameter name="max" type="float">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="NO_TEXTURE" static="true" transient="false" type="int" type-generic-aware="int" value="-1" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="PixelBuffer" static="false" visibility="public">
      <constructor deprecated="not deprecated" final="false" name="PixelBuffer" static="false" type="jp.co.cyberagent.android.gpuimage.PixelBuffer" visibility="public">
        <parameter name="width" type="int">
        </parameter>
        <parameter name="height" type="int">
        </parameter>
      </constructor>
      <method abstract="false" deprecated="not deprecated" final="false" name="destroy" native="false" return="void" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="getBitmap" native="false" return="android.graphics.Bitmap" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="setRenderer" native="false" return="void" static="false" synchronized="false" visibility="public">
        <parameter name="renderer" type="android.opengl.GLSurfaceView.Renderer">
        </parameter>
      </method>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Enum" extends-generic-aware="java.lang.Enum&lt;jp.co.cyberagent.android.gpuimage.Rotation&gt;" final="true" name="Rotation" static="false" visibility="public">
      <method abstract="false" deprecated="not deprecated" final="false" name="asInt" native="false" return="int" static="false" synchronized="false" visibility="public">
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="fromInt" native="false" return="jp.co.cyberagent.android.gpuimage.Rotation" static="true" synchronized="false" visibility="public">
        <parameter name="rotation" type="int">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="valueOf" native="false" return="jp.co.cyberagent.android.gpuimage.Rotation" static="true" synchronized="false" visibility="public">
        <parameter name="name" type="java.lang.String">
        </parameter>
      </method>
      <method abstract="false" deprecated="not deprecated" final="false" name="values" native="false" return="jp.co.cyberagent.android.gpuimage.Rotation[]" static="true" synchronized="false" visibility="public">
      </method>
      <field deprecated="not deprecated" final="true" name="NORMAL" static="true" transient="false" type="jp.co.cyberagent.android.gpuimage.Rotation" type-generic-aware="jp.co.cyberagent.android.gpuimage.Rotation" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="ROTATION_180" static="true" transient="false" type="jp.co.cyberagent.android.gpuimage.Rotation" type-generic-aware="jp.co.cyberagent.android.gpuimage.Rotation" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="ROTATION_270" static="true" transient="false" type="jp.co.cyberagent.android.gpuimage.Rotation" type-generic-aware="jp.co.cyberagent.android.gpuimage.Rotation" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="ROTATION_90" static="true" transient="false" type="jp.co.cyberagent.android.gpuimage.Rotation" type-generic-aware="jp.co.cyberagent.android.gpuimage.Rotation" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="Rotation.1" static="true" visibility=""></class>
  </package>
  <package name="jp.co.cyberagent.android.gpuimage.util">
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="TextureRotationUtil" static="false" visibility="public">
      <method abstract="false" deprecated="not deprecated" final="false" name="getRotation" native="false" return="float[]" static="true" synchronized="false" visibility="public">
        <parameter name="rotation" type="jp.co.cyberagent.android.gpuimage.Rotation">
        </parameter>
        <parameter name="flipHorizontal" type="boolean">
        </parameter>
        <parameter name="flipVertical" type="boolean">
        </parameter>
      </method>
      <field deprecated="not deprecated" final="true" name="TEXTURE_NO_ROTATION" static="true" transient="false" type="float[]" type-generic-aware="float[]" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="TEXTURE_ROTATED_180" static="true" transient="false" type="float[]" type-generic-aware="float[]" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="TEXTURE_ROTATED_270" static="true" transient="false" type="float[]" type-generic-aware="float[]" visibility="public" volatile="false">
      </field>
      <field deprecated="not deprecated" final="true" name="TEXTURE_ROTATED_90" static="true" transient="false" type="float[]" type-generic-aware="float[]" visibility="public" volatile="false">
      </field>
    </class>
    <class abstract="false" deprecated="not deprecated" extends="java.lang.Object" extends-generic-aware="java.lang.Object" final="false" name="TextureRotationUtil.1" static="true" visibility=""></class>
  </package>
</api>