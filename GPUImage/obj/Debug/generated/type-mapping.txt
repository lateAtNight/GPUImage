jp/co/cyberagent/android/gpuimage/BuildConfig = JP.CO.Cyberagent.Android.Gpuimage.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
jp/co/cyberagent/android/gpuimage/GPUImage = JP.CO.Cyberagent.Android.Gpuimage.GPUImage
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  getBitmapWithFilterApplied()Landroid/graphics/Bitmap; = BitmapWithFilterApplied
  deleteImage()V = DeleteImage()
  getBitmapForMultipleFilters(Landroid/graphics/Bitmap;Ljava/util/List;Ljp/co/cyberagent/android/gpuimage/GPUImage$ResponseListener;)V = GetBitmapForMultipleFilters(Android.Graphics.Bitmap, System.Collections.Generic.IList<JP.CO.Cyberagent.Android.Gpuimage.GPUImageFilter>, JP.CO.Cyberagent.Android.Gpuimage.GPUImage.IResponseListener)
  getBitmapWithFilterApplied(Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap; = GetBitmapWithFilterApplied(Android.Graphics.Bitmap)
  requestRender()V = RequestRender()
  saveToPictures(Landroid/graphics/Bitmap;Ljava/lang/String;Ljava/lang/String;Ljp/co/cyberagent/android/gpuimage/GPUImage$OnPictureSavedListener;)V = SaveToPictures(Android.Graphics.Bitmap, string, string, JP.CO.Cyberagent.Android.Gpuimage.GPUImage.IOnPictureSavedListener)
  saveToPictures(Ljava/lang/String;Ljava/lang/String;Ljp/co/cyberagent/android/gpuimage/GPUImage$OnPictureSavedListener;)V = SaveToPictures(string, string, JP.CO.Cyberagent.Android.Gpuimage.GPUImage.IOnPictureSavedListener)
  setFilter(Ljp/co/cyberagent/android/gpuimage/GPUImageFilter;)V = SetFilter(JP.CO.Cyberagent.Android.Gpuimage.GPUImageFilter)
  setGLSurfaceView(Landroid/opengl/GLSurfaceView;)V = SetGLSurfaceView(Android.Opengl.GLSurfaceView)
  setImage(Landroid/graphics/Bitmap;)V = SetImage(Android.Graphics.Bitmap)
  setImage(Landroid/net/Uri;)V = SetImage(Android.Net.Uri)
  setImage(Ljava/io/File;)V = SetImage(Java.IO.File)
  setRotation(Ljp/co/cyberagent/android/gpuimage/Rotation;)V = SetRotation(JP.CO.Cyberagent.Android.Gpuimage.Rotation)
  setRotation(Ljp/co/cyberagent/android/gpuimage/Rotation;ZZ)V = SetRotation(JP.CO.Cyberagent.Android.Gpuimage.Rotation, bool, bool)
  setScaleType(Ljp/co/cyberagent/android/gpuimage/GPUImage$ScaleType;)V = SetScaleType(JP.CO.Cyberagent.Android.Gpuimage.GPUImage.ScaleType)
  setUpCamera(Landroid/hardware/Camera;)V = SetUpCamera(Android.Hardware.Camera)
  setUpCamera(Landroid/hardware/Camera;IZZ)V = SetUpCamera(Android.Hardware.Camera, int, bool, bool)
jp/co/cyberagent/android/gpuimage/GPUImage3x3ConvolutionFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImage3x3ConvolutionFilter
  <init>()V = .ctor()
  <init>([F)V = .ctor(float[])
  THREE_X_THREE_TEXTURE_SAMPLING_FRAGMENT_SHADER = ThreeXThreeTextureSamplingFragmentShader
  setConvolutionKernel([F)V = SetConvolutionKernel(float[])
jp/co/cyberagent/android/gpuimage/GPUImage3x3TextureSamplingFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImage3x3TextureSamplingFilter
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  THREE_X_THREE_TEXTURE_SAMPLING_VERTEX_SHADER = ThreeXThreeTextureSamplingVertexShader
  setLineSize(F)V = SetLineSize(float)
  setTexelHeight(F)V = SetTexelHeight(float)
  setTexelWidth(F)V = SetTexelWidth(float)
jp/co/cyberagent/android/gpuimage/GPUImageAddBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageAddBlendFilter
  <init>()V = .ctor()
  ADD_BLEND_FRAGMENT_SHADER = AddBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageAlphaBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageAlphaBlendFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  ALPHA_BLEND_FRAGMENT_SHADER = AlphaBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageBilateralFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageBilateralFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  BILATERAL_FRAGMENT_SHADER = BilateralFragmentShader
  BILATERAL_VERTEX_SHADER = BilateralVertexShader
  setDistanceNormalizationFactor(F)V = SetDistanceNormalizationFactor(float)
jp/co/cyberagent/android/gpuimage/GPUImageBoxBlurFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageBoxBlurFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  FRAGMENT_SHADER = FragmentShader
  VERTEX_SHADER = VertexShader
  setBlurSize(F)V = SetBlurSize(float)
jp/co/cyberagent/android/gpuimage/GPUImageBrightnessFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageBrightnessFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  BRIGHTNESS_FRAGMENT_SHADER = BrightnessFragmentShader
  setBrightness(F)V = SetBrightness(float)
jp/co/cyberagent/android/gpuimage/GPUImageBulgeDistortionFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageBulgeDistortionFilter
  <init>()V = .ctor()
  <init>(FFLandroid/graphics/PointF;)V = .ctor(float, float, Android.Graphics.PointF)
  BULGE_FRAGMENT_SHADER = BulgeFragmentShader
  setCenter(Landroid/graphics/PointF;)V = SetCenter(Android.Graphics.PointF)
  setRadius(F)V = SetRadius(float)
  setScale(F)V = SetScale(float)
jp/co/cyberagent/android/gpuimage/GPUImageCGAColorspaceFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageCGAColorspaceFilter
  <init>()V = .ctor()
  CGACOLORSPACE_FRAGMENT_SHADER = CgacolorspaceFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageChromaKeyBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageChromaKeyBlendFilter
  <init>()V = .ctor()
  CHROMA_KEY_BLEND_FRAGMENT_SHADER = ChromaKeyBlendFragmentShader
  setColorToReplace(FFF)V = SetColorToReplace(float, float, float)
  setSmoothing(F)V = SetSmoothing(float)
  setThresholdSensitivity(F)V = SetThresholdSensitivity(float)
jp/co/cyberagent/android/gpuimage/GPUImageColorBalanceFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageColorBalanceFilter
  <init>()V = .ctor()
  GPU_IMAGE_COLOR_BALANCE_FRAGMENT_SHADER = GpuImageColorBalanceFragmentShader
  setHighlights([F)V = SetHighlights(float[])
  setMidtones([F)V = SetMidtones(float[])
  setPreserveLuminosity(Z)V = SetPreserveLuminosity(bool)
  setShowdows([F)V = SetShowdows(float[])
jp/co/cyberagent/android/gpuimage/GPUImageColorBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageColorBlendFilter
  <init>()V = .ctor()
  COLOR_BLEND_FRAGMENT_SHADER = ColorBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageColorBurnBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageColorBurnBlendFilter
  <init>()V = .ctor()
  COLOR_BURN_BLEND_FRAGMENT_SHADER = ColorBurnBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageColorDodgeBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageColorDodgeBlendFilter
  <init>()V = .ctor()
  COLOR_DODGE_BLEND_FRAGMENT_SHADER = ColorDodgeBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageColorInvertFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageColorInvertFilter
  <init>()V = .ctor()
  COLOR_INVERT_FRAGMENT_SHADER = ColorInvertFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageColorMatrixFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageColorMatrixFilter
  <init>()V = .ctor()
  <init>(F[F)V = .ctor(float, float[])
  COLOR_MATRIX_FRAGMENT_SHADER = ColorMatrixFragmentShader
  setColorMatrix([F)V = SetColorMatrix(float[])
  setIntensity(F)V = SetIntensity(float)
jp/co/cyberagent/android/gpuimage/GPUImageContrastFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageContrastFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  CONTRAST_FRAGMENT_SHADER = ContrastFragmentShader
  setContrast(F)V = SetContrast(float)
jp/co/cyberagent/android/gpuimage/GPUImageCrosshatchFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageCrosshatchFilter
  <init>()V = .ctor()
  <init>(FF)V = .ctor(float, float)
  CROSSHATCH_FRAGMENT_SHADER = CrosshatchFragmentShader
  setCrossHatchSpacing(F)V = SetCrossHatchSpacing(float)
  setLineWidth(F)V = SetLineWidth(float)
jp/co/cyberagent/android/gpuimage/GPUImageDarkenBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageDarkenBlendFilter
  <init>()V = .ctor()
  DARKEN_BLEND_FRAGMENT_SHADER = DarkenBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageDifferenceBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageDifferenceBlendFilter
  <init>()V = .ctor()
  DIFFERENCE_BLEND_FRAGMENT_SHADER = DifferenceBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageDilationFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageDilationFilter
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  FRAGMENT_SHADER_1 = FragmentShader1
  FRAGMENT_SHADER_2 = FragmentShader2
  FRAGMENT_SHADER_3 = FragmentShader3
  FRAGMENT_SHADER_4 = FragmentShader4
  VERTEX_SHADER_1 = VertexShader1
  VERTEX_SHADER_2 = VertexShader2
  VERTEX_SHADER_3 = VertexShader3
  VERTEX_SHADER_4 = VertexShader4
jp/co/cyberagent/android/gpuimage/GPUImageDirectionalSobelEdgeDetectionFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageDirectionalSobelEdgeDetectionFilter
  <init>()V = .ctor()
  DIRECTIONAL_SOBEL_EDGE_DETECTION_FRAGMENT_SHADER = DirectionalSobelEdgeDetectionFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageDissolveBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageDissolveBlendFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  DISSOLVE_BLEND_FRAGMENT_SHADER = DissolveBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageDivideBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageDivideBlendFilter
  <init>()V = .ctor()
  DIVIDE_BLEND_FRAGMENT_SHADER = DivideBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageEmbossFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageEmbossFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  getIntensity()F = Intensity
  setIntensity(F)V = Intensity
jp/co/cyberagent/android/gpuimage/GPUImageExclusionBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageExclusionBlendFilter
  <init>()V = .ctor()
  EXCLUSION_BLEND_FRAGMENT_SHADER = ExclusionBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageExposureFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageExposureFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  EXPOSURE_FRAGMENT_SHADER = ExposureFragmentShader
  setExposure(F)V = SetExposure(float)
jp/co/cyberagent/android/gpuimage/GPUImageFalseColorFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageFalseColorFilter
  <init>()V = .ctor()
  <init>([F[F)V = .ctor(float[], float[])
  <init>(FFFFFF)V = .ctor(float, float, float, float, float, float)
  FALSECOLOR_FRAGMENT_SHADER = FalsecolorFragmentShader
  setFirstColor([F)V = SetFirstColor(float[])
  setSecondColor([F)V = SetSecondColor(float[])
jp/co/cyberagent/android/gpuimage/GPUImageFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageFilter
  <init>()V = .ctor()
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  mGLAttribPosition = MGLAttribPosition
  mGLAttribTextureCoordinate = MGLAttribTextureCoordinate
  mGLProgId = MGLProgId
  mGLUniformTexture = MGLUniformTexture
  mOutputHeight = MOutputHeight
  mOutputWidth = MOutputWidth
  NO_FILTER_FRAGMENT_SHADER = NoFilterFragmentShader
  NO_FILTER_VERTEX_SHADER = NoFilterVertexShader
  getAttribPosition()I = AttribPosition
  getAttribTextureCoordinate()I = AttribTextureCoordinate
  isInitialized()Z = IsInitialized
  getOutputHeight()I = OutputHeight
  getOutputWidth()I = OutputWidth
  getProgram()I = Program
  getUniformTexture()I = UniformTexture
  convertStreamToString(Ljava/io/InputStream;)Ljava/lang/String; = ConvertStreamToString(System.IO.Stream)
  destroy()V = Destroy()
  init()V = Init()
  loadShader(Ljava/lang/String;Landroid/content/Context;)Ljava/lang/String; = LoadShader(string, Android.Content.Context)
  onDestroy()V = OnDestroy()
  onDraw(ILjava/nio/FloatBuffer;Ljava/nio/FloatBuffer;)V = OnDraw(int, Java.Nio.FloatBuffer, Java.Nio.FloatBuffer)
  onDrawArraysPre()V = OnDrawArraysPre()
  onInit()V = OnInit()
  onInitialized()V = OnInitialized()
  onOutputSizeChanged(II)V = OnOutputSizeChanged(int, int)
  runOnDraw(Ljava/lang/Runnable;)V = RunOnDraw(Java.Lang.IRunnable)
  runPendingOnDrawTasks()V = RunPendingOnDrawTasks()
  setFloat(IF)V = SetFloat(int, float)
  setFloatArray(I[F)V = SetFloatArray(int, float[])
  setFloatVec2(I[F)V = SetFloatVec2(int, float[])
  setFloatVec3(I[F)V = SetFloatVec3(int, float[])
  setFloatVec4(I[F)V = SetFloatVec4(int, float[])
  setInteger(II)V = SetInteger(int, int)
  setPoint(ILandroid/graphics/PointF;)V = SetPoint(int, Android.Graphics.PointF)
  setUniformMatrix3f(I[F)V = SetUniformMatrix3f(int, float[])
  setUniformMatrix4f(I[F)V = SetUniformMatrix4f(int, float[])
jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup = JP.CO.Cyberagent.Android.Gpuimage.GPUImageFilterGroup
  <init>()V = .ctor()
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<JP.CO.Cyberagent.Android.Gpuimage.GPUImageFilter>)
  mFilters = MFilters
  mMergedFilters = MMergedFilters
  getFilters()Ljava/util/List; = Filters
  getMergedFilters()Ljava/util/List; = MergedFilters
  addFilter(Ljp/co/cyberagent/android/gpuimage/GPUImageFilter;)V = AddFilter(JP.CO.Cyberagent.Android.Gpuimage.GPUImageFilter)
  updateMergedFilters()V = UpdateMergedFilters()
jp/co/cyberagent/android/gpuimage/GPUImageGammaFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageGammaFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  GAMMA_FRAGMENT_SHADER = GammaFragmentShader
  setGamma(F)V = SetGamma(float)
jp/co/cyberagent/android/gpuimage/GPUImageGaussianBlurFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageGaussianBlurFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  FRAGMENT_SHADER = FragmentShader
  mBlurSize = MBlurSize
  VERTEX_SHADER = VertexShader
  setBlurSize(F)V = SetBlurSize(float)
jp/co/cyberagent/android/gpuimage/GPUImageGlassSphereFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageGlassSphereFilter
  <init>()V = .ctor()
  <init>(Landroid/graphics/PointF;FF)V = .ctor(Android.Graphics.PointF, float, float)
  SPHERE_FRAGMENT_SHADER = SphereFragmentShader
  setCenter(Landroid/graphics/PointF;)V = SetCenter(Android.Graphics.PointF)
  setRadius(F)V = SetRadius(float)
  setRefractiveIndex(F)V = SetRefractiveIndex(float)
jp/co/cyberagent/android/gpuimage/GPUImageGrayscaleFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageGrayscaleFilter
  <init>()V = .ctor()
  GRAYSCALE_FRAGMENT_SHADER = GrayscaleFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageHardLightBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageHardLightBlendFilter
  <init>()V = .ctor()
  HARD_LIGHT_BLEND_FRAGMENT_SHADER = HardLightBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageHazeFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageHazeFilter
  <init>()V = .ctor()
  <init>(FF)V = .ctor(float, float)
  HAZE_FRAGMENT_SHADER = HazeFragmentShader
  setDistance(F)V = SetDistance(float)
  setSlope(F)V = SetSlope(float)
jp/co/cyberagent/android/gpuimage/GPUImageHighlightShadowFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageHighlightShadowFilter
  <init>()V = .ctor()
  <init>(FF)V = .ctor(float, float)
  HIGHLIGHT_SHADOW_FRAGMENT_SHADER = HighlightShadowFragmentShader
  setHighlights(F)V = SetHighlights(float)
  setShadows(F)V = SetShadows(float)
jp/co/cyberagent/android/gpuimage/GPUImageHueBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageHueBlendFilter
  <init>()V = .ctor()
  HUE_BLEND_FRAGMENT_SHADER = HueBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageHueFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageHueFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  HUE_FRAGMENT_SHADER = HueFragmentShader
  setHue(F)V = SetHue(float)
jp/co/cyberagent/android/gpuimage/GPUImageKuwaharaFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageKuwaharaFilter
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  KUWAHARA_FRAGMENT_SHADER = KuwaharaFragmentShader
  setRadius(I)V = SetRadius(int)
jp/co/cyberagent/android/gpuimage/GPUImageLaplacianFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageLaplacianFilter
  <init>()V = .ctor()
  LAPLACIAN_FRAGMENT_SHADER = LaplacianFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageLevelsFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageLevelsFilter
  <init>()V = .ctor()
  LEVELS_FRAGMET_SHADER = LevelsFragmetShader
  setBlueMin(FFF)V = SetBlueMin(float, float, float)
  setBlueMin(FFFFF)V = SetBlueMin(float, float, float, float, float)
  setGreenMin(FFF)V = SetGreenMin(float, float, float)
  setGreenMin(FFFFF)V = SetGreenMin(float, float, float, float, float)
  setMin(FFF)V = SetMin(float, float, float)
  setMin(FFFFF)V = SetMin(float, float, float, float, float)
  setRedMin(FFF)V = SetRedMin(float, float, float)
  setRedMin(FFFFF)V = SetRedMin(float, float, float, float, float)
  updateUniforms()V = UpdateUniforms()
jp/co/cyberagent/android/gpuimage/GPUImageLightenBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageLightenBlendFilter
  <init>()V = .ctor()
  LIGHTEN_BLEND_FRAGMENT_SHADER = LightenBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageLinearBurnBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageLinearBurnBlendFilter
  <init>()V = .ctor()
  LINEAR_BURN_BLEND_FRAGMENT_SHADER = LinearBurnBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageLookupFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageLookupFilter
  <init>()V = .ctor()
  LOOKUP_FRAGMENT_SHADER = LookupFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageLuminosityBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageLuminosityBlendFilter
  <init>()V = .ctor()
  LUMINOSITY_BLEND_FRAGMENT_SHADER = LuminosityBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageMixBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageMixBlendFilter
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;F)V = .ctor(string, float)
  setMix(F)V = SetMix(float)
jp/co/cyberagent/android/gpuimage/GPUImageMonochromeFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageMonochromeFilter
  <init>()V = .ctor()
  <init>(F[F)V = .ctor(float, float[])
  MONOCHROME_FRAGMENT_SHADER = MonochromeFragmentShader
  setColor([F)V = SetColor(float[])
  setColorRed(FFF)V = SetColorRed(float, float, float)
  setIntensity(F)V = SetIntensity(float)
jp/co/cyberagent/android/gpuimage/GPUImageMultiplyBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageMultiplyBlendFilter
  <init>()V = .ctor()
  MULTIPLY_BLEND_FRAGMENT_SHADER = MultiplyBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageNativeLibrary = JP.CO.Cyberagent.Android.Gpuimage.GPUImageNativeLibrary
  <init>()V = .ctor()
  YUVtoARBG([BII[I)V = YUVtoARBG(byte[], int, int, int[])
  YUVtoRBGA([BII[I)V = YUVtoRBGA(byte[], int, int, int[])
jp/co/cyberagent/android/gpuimage/GPUImageNonMaximumSuppressionFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageNonMaximumSuppressionFilter
  <init>()V = .ctor()
  NMS_FRAGMENT_SHADER = NmsFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageNormalBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageNormalBlendFilter
  <init>()V = .ctor()
  NORMAL_BLEND_FRAGMENT_SHADER = NormalBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageOpacityFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageOpacityFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  OPACITY_FRAGMENT_SHADER = OpacityFragmentShader
  setOpacity(F)V = SetOpacity(float)
jp/co/cyberagent/android/gpuimage/GPUImageOverlayBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageOverlayBlendFilter
  <init>()V = .ctor()
  OVERLAY_BLEND_FRAGMENT_SHADER = OverlayBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImagePixelationFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImagePixelationFilter
  <init>()V = .ctor()
  PIXELATION_FRAGMENT_SHADER = PixelationFragmentShader
  setPixel(F)V = SetPixel(float)
jp/co/cyberagent/android/gpuimage/GPUImagePosterizeFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImagePosterizeFilter
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  POSTERIZE_FRAGMENT_SHADER = PosterizeFragmentShader
  setColorLevels(I)V = SetColorLevels(int)
jp/co/cyberagent/android/gpuimage/GPUImageRenderer = JP.CO.Cyberagent.Android.Gpuimage.GPUImageRenderer
  <init>(Ljp/co/cyberagent/android/gpuimage/GPUImageFilter;)V = .ctor(JP.CO.Cyberagent.Android.Gpuimage.GPUImageFilter)
  mSurfaceChangedWaiter = MSurfaceChangedWaiter
  NO_IMAGE = NoImage
  getFrameHeight()I = FrameHeight
  getFrameWidth()I = FrameWidth
  isFlippedHorizontally()Z = IsFlippedHorizontally
  isFlippedVertically()Z = IsFlippedVertically
  getRotation()Ljp/co/cyberagent/android/gpuimage/Rotation; = Rotation
  setRotation(Ljp/co/cyberagent/android/gpuimage/Rotation;)V = Rotation
  deleteImage()V = DeleteImage()
  onDrawFrame(Ljavax/microedition/khronos/opengles/GL10;)V = OnDrawFrame(Javax.Microedition.Khronos.Opengles.IGL10)
  onPreviewFrame([BLandroid/hardware/Camera;)V = OnPreviewFrame(byte[], Android.Hardware.Camera)
  onSurfaceChanged(Ljavax/microedition/khronos/opengles/GL10;II)V = OnSurfaceChanged(Javax.Microedition.Khronos.Opengles.IGL10, int, int)
  onSurfaceCreated(Ljavax/microedition/khronos/opengles/GL10;Ljavax/microedition/khronos/egl/EGLConfig;)V = OnSurfaceCreated(Javax.Microedition.Khronos.Opengles.IGL10, Javax.Microedition.Khronos.Egl.EGLConfig)
  runOnDraw(Ljava/lang/Runnable;)V = RunOnDraw(Java.Lang.IRunnable)
  runOnDrawEnd(Ljava/lang/Runnable;)V = RunOnDrawEnd(Java.Lang.IRunnable)
  setFilter(Ljp/co/cyberagent/android/gpuimage/GPUImageFilter;)V = SetFilter(JP.CO.Cyberagent.Android.Gpuimage.GPUImageFilter)
  setImageBitmap(Landroid/graphics/Bitmap;)V = SetImageBitmap(Android.Graphics.Bitmap)
  setImageBitmap(Landroid/graphics/Bitmap;Z)V = SetImageBitmap(Android.Graphics.Bitmap, bool)
  setRotation(Ljp/co/cyberagent/android/gpuimage/Rotation;ZZ)V = SetRotation(JP.CO.Cyberagent.Android.Gpuimage.Rotation, bool, bool)
  setRotationCamera(Ljp/co/cyberagent/android/gpuimage/Rotation;ZZ)V = SetRotationCamera(JP.CO.Cyberagent.Android.Gpuimage.Rotation, bool, bool)
  setScaleType(Ljp/co/cyberagent/android/gpuimage/GPUImage$ScaleType;)V = SetScaleType(JP.CO.Cyberagent.Android.Gpuimage.GPUImage.ScaleType)
  setUpSurfaceTexture(Landroid/hardware/Camera;)V = SetUpSurfaceTexture(Android.Hardware.Camera)
jp/co/cyberagent/android/gpuimage/GPUImageRGBDilationFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageRGBDilationFilter
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  FRAGMENT_SHADER_1 = FragmentShader1
  FRAGMENT_SHADER_2 = FragmentShader2
  FRAGMENT_SHADER_3 = FragmentShader3
  FRAGMENT_SHADER_4 = FragmentShader4
  VERTEX_SHADER_1 = VertexShader1
  VERTEX_SHADER_2 = VertexShader2
  VERTEX_SHADER_3 = VertexShader3
  VERTEX_SHADER_4 = VertexShader4
jp/co/cyberagent/android/gpuimage/GPUImageRGBFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageRGBFilter
  <init>()V = .ctor()
  <init>(FFF)V = .ctor(float, float, float)
  RGB_FRAGMENT_SHADER = RgbFragmentShader
  setBlue(F)V = SetBlue(float)
  setGreen(F)V = SetGreen(float)
  setRed(F)V = SetRed(float)
jp/co/cyberagent/android/gpuimage/GPUImageSaturationBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageSaturationBlendFilter
  <init>()V = .ctor()
  SATURATION_BLEND_FRAGMENT_SHADER = SaturationBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageSaturationFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageSaturationFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  SATURATION_FRAGMENT_SHADER = SaturationFragmentShader
  setSaturation(F)V = SetSaturation(float)
jp/co/cyberagent/android/gpuimage/GPUImageScreenBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageScreenBlendFilter
  <init>()V = .ctor()
  SCREEN_BLEND_FRAGMENT_SHADER = ScreenBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageSepiaFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageSepiaFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
jp/co/cyberagent/android/gpuimage/GPUImageSharpenFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageSharpenFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  SHARPEN_FRAGMENT_SHADER = SharpenFragmentShader
  SHARPEN_VERTEX_SHADER = SharpenVertexShader
  setSharpness(F)V = SetSharpness(float)
jp/co/cyberagent/android/gpuimage/GPUImageSketchFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageSketchFilter
  <init>()V = .ctor()
  SKETCH_FRAGMENT_SHADER = SketchFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageSmoothToonFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageSmoothToonFilter
  <init>()V = .ctor()
  setBlurSize(F)V = SetBlurSize(float)
  setQuantizationLevels(F)V = SetQuantizationLevels(float)
  setTexelHeight(F)V = SetTexelHeight(float)
  setTexelWidth(F)V = SetTexelWidth(float)
  setThreshold(F)V = SetThreshold(float)
jp/co/cyberagent/android/gpuimage/GPUImageSobelEdgeDetection = JP.CO.Cyberagent.Android.Gpuimage.GPUImageSobelEdgeDetection
  <init>()V = .ctor()
  SOBEL_EDGE_DETECTION = SobelEdgeDetection
  setLineSize(F)V = SetLineSize(float)
jp/co/cyberagent/android/gpuimage/GPUImageSobelThresholdFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageSobelThresholdFilter
  <init>()V = .ctor()
  <init>(F)V = .ctor(float)
  SOBEL_THRESHOLD_EDGE_DETECTION = SobelThresholdEdgeDetection
  setThreshold(F)V = SetThreshold(float)
jp/co/cyberagent/android/gpuimage/GPUImageSoftLightBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageSoftLightBlendFilter
  <init>()V = .ctor()
  SOFT_LIGHT_BLEND_FRAGMENT_SHADER = SoftLightBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageSourceOverBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageSourceOverBlendFilter
  <init>()V = .ctor()
  SOURCE_OVER_BLEND_FRAGMENT_SHADER = SourceOverBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageSphereRefractionFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageSphereRefractionFilter
  <init>()V = .ctor()
  <init>(Landroid/graphics/PointF;FF)V = .ctor(Android.Graphics.PointF, float, float)
  SPHERE_FRAGMENT_SHADER = SphereFragmentShader
  setCenter(Landroid/graphics/PointF;)V = SetCenter(Android.Graphics.PointF)
  setRadius(F)V = SetRadius(float)
  setRefractiveIndex(F)V = SetRefractiveIndex(float)
jp/co/cyberagent/android/gpuimage/GPUImageSubtractBlendFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageSubtractBlendFilter
  <init>()V = .ctor()
  SUBTRACT_BLEND_FRAGMENT_SHADER = SubtractBlendFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageSwirlFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageSwirlFilter
  <init>()V = .ctor()
  <init>(FFLandroid/graphics/PointF;)V = .ctor(float, float, Android.Graphics.PointF)
  SWIRL_FRAGMENT_SHADER = SwirlFragmentShader
  setAngle(F)V = SetAngle(float)
  setCenter(Landroid/graphics/PointF;)V = SetCenter(Android.Graphics.PointF)
  setRadius(F)V = SetRadius(float)
jp/co/cyberagent/android/gpuimage/GPUImageThresholdEdgeDetection = JP.CO.Cyberagent.Android.Gpuimage.GPUImageThresholdEdgeDetection
  <init>()V = .ctor()
  setLineSize(F)V = SetLineSize(float)
  setThreshold(F)V = SetThreshold(float)
jp/co/cyberagent/android/gpuimage/GPUImageToneCurveFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageToneCurveFilter
  <init>()V = .ctor()
  TONE_CURVE_FRAGMENT_SHADER = ToneCurveFragmentShader
  setBlueControlPoints([Landroid/graphics/PointF;)V = SetBlueControlPoints(Android.Graphics.PointF[])
  setFromCurveFileInputStream(Ljava/io/InputStream;)V = SetFromCurveFileInputStream(System.IO.Stream)
  setGreenControlPoints([Landroid/graphics/PointF;)V = SetGreenControlPoints(Android.Graphics.PointF[])
  setRedControlPoints([Landroid/graphics/PointF;)V = SetRedControlPoints(Android.Graphics.PointF[])
  setRgbCompositeControlPoints([Landroid/graphics/PointF;)V = SetRgbCompositeControlPoints(Android.Graphics.PointF[])
jp/co/cyberagent/android/gpuimage/GPUImageToonFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageToonFilter
  <init>()V = .ctor()
  <init>(FF)V = .ctor(float, float)
  TOON_FRAGMENT_SHADER = ToonFragmentShader
  setQuantizationLevels(F)V = SetQuantizationLevels(float)
  setThreshold(F)V = SetThreshold(float)
jp/co/cyberagent/android/gpuimage/GPUImageTwoInputFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageTwoInputFilter
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  mFilterInputTextureUniform2 = MFilterInputTextureUniform2
  mFilterSecondTextureCoordinateAttribute = MFilterSecondTextureCoordinateAttribute
  mFilterSourceTexture2 = MFilterSourceTexture2
  getBitmap()Landroid/graphics/Bitmap; = Bitmap
  setBitmap(Landroid/graphics/Bitmap;)V = Bitmap
  recycleBitmap()V = RecycleBitmap()
  setRotation(Ljp/co/cyberagent/android/gpuimage/Rotation;ZZ)V = SetRotation(JP.CO.Cyberagent.Android.Gpuimage.Rotation, bool, bool)
jp/co/cyberagent/android/gpuimage/GPUImageTwoPassFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageTwoPassFilter
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string, string)
jp/co/cyberagent/android/gpuimage/GPUImageTwoPassTextureSamplingFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageTwoPassTextureSamplingFilter
  <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string, string, string)
  getHorizontalTexelOffsetRatio()F = HorizontalTexelOffsetRatio
  getVerticalTexelOffsetRatio()F = VerticalTexelOffsetRatio
  initTexelOffsets()V = InitTexelOffsets()
jp/co/cyberagent/android/gpuimage/GPUImageView = JP.CO.Cyberagent.Android.Gpuimage.GPUImageView
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  mForceSize = MForceSize
  getFilter()Ljp/co/cyberagent/android/gpuimage/GPUImageFilter; = Filter
  setFilter(Ljp/co/cyberagent/android/gpuimage/GPUImageFilter;)V = Filter
  getGPUImage()Ljp/co/cyberagent/android/gpuimage/GPUImage; = GPUImage
  capture()Landroid/graphics/Bitmap; = Capture()
  capture(II)Landroid/graphics/Bitmap; = Capture(int, int)
  onPause()V = OnPause()
  onResume()V = OnResume()
  requestRender()V = RequestRender()
  saveToPictures(Ljava/lang/String;Ljava/lang/String;IILjp/co/cyberagent/android/gpuimage/GPUImageView$OnPictureSavedListener;)V = SaveToPictures(string, string, int, int, JP.CO.Cyberagent.Android.Gpuimage.GPUImageView.IOnPictureSavedListener)
  saveToPictures(Ljava/lang/String;Ljava/lang/String;Ljp/co/cyberagent/android/gpuimage/GPUImageView$OnPictureSavedListener;)V = SaveToPictures(string, string, JP.CO.Cyberagent.Android.Gpuimage.GPUImageView.IOnPictureSavedListener)
  setImage(Landroid/graphics/Bitmap;)V = SetImage(Android.Graphics.Bitmap)
  setImage(Landroid/net/Uri;)V = SetImage(Android.Net.Uri)
  setImage(Ljava/io/File;)V = SetImage(Java.IO.File)
  setRatio(F)V = SetRatio(float)
  setRotation(Ljp/co/cyberagent/android/gpuimage/Rotation;)V = SetRotation(JP.CO.Cyberagent.Android.Gpuimage.Rotation)
  setScaleType(Ljp/co/cyberagent/android/gpuimage/GPUImage$ScaleType;)V = SetScaleType(JP.CO.Cyberagent.Android.Gpuimage.GPUImage.ScaleType)
jp/co/cyberagent/android/gpuimage/GPUImageVignetteFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageVignetteFilter
  <init>()V = .ctor()
  <init>(Landroid/graphics/PointF;[FFF)V = .ctor(Android.Graphics.PointF, float[], float, float)
  VIGNETTING_FRAGMENT_SHADER = VignettingFragmentShader
  setVignetteCenter(Landroid/graphics/PointF;)V = SetVignetteCenter(Android.Graphics.PointF)
  setVignetteColor([F)V = SetVignetteColor(float[])
  setVignetteEnd(F)V = SetVignetteEnd(float)
  setVignetteStart(F)V = SetVignetteStart(float)
jp/co/cyberagent/android/gpuimage/GPUImageWeakPixelInclusionFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageWeakPixelInclusionFilter
  <init>()V = .ctor()
  WEAKPIXEL_FRAGMENT_SHADER = WeakpixelFragmentShader
jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter = JP.CO.Cyberagent.Android.Gpuimage.GPUImageWhiteBalanceFilter
  <init>()V = .ctor()
  <init>(FF)V = .ctor(float, float)
  WHITE_BALANCE_FRAGMENT_SHADER = WhiteBalanceFragmentShader
  setTemperature(F)V = SetTemperature(float)
  setTint(F)V = SetTint(float)
jp/co/cyberagent/android/gpuimage/OpenGlUtils = JP.CO.Cyberagent.Android.Gpuimage.OpenGlUtils
  <init>()V = .ctor()
  NO_TEXTURE = NoTexture
  loadProgram(Ljava/lang/String;Ljava/lang/String;)I = LoadProgram(string, string)
  loadShader(Ljava/lang/String;I)I = LoadShader(string, int)
  loadTexture(Landroid/graphics/Bitmap;I)I = LoadTexture(Android.Graphics.Bitmap, int)
  loadTexture(Landroid/graphics/Bitmap;IZ)I = LoadTexture(Android.Graphics.Bitmap, int, bool)
  loadTexture(Ljava/nio/IntBuffer;Landroid/hardware/Camera$Size;I)I = LoadTexture(Java.Nio.IntBuffer, Android.Hardware.Camera.Size, int)
  loadTextureAsBitmap(Ljava/nio/IntBuffer;Landroid/hardware/Camera$Size;I)I = LoadTextureAsBitmap(Java.Nio.IntBuffer, Android.Hardware.Camera.Size, int)
  rnd(FF)F = Rnd(float, float)
jp/co/cyberagent/android/gpuimage/PixelBuffer = JP.CO.Cyberagent.Android.Gpuimage.PixelBuffer
  <init>(II)V = .ctor(int, int)
  getBitmap()Landroid/graphics/Bitmap; = Bitmap
  destroy()V = Destroy()
  setRenderer(Landroid/opengl/GLSurfaceView$Renderer;)V = SetRenderer(Android.Opengl.GLSurfaceView.IRenderer)
jp/co/cyberagent/android/gpuimage/Rotation = JP.CO.Cyberagent.Android.Gpuimage.Rotation
  NORMAL = Normal
  ROTATION_180 = Rotation180
  ROTATION_270 = Rotation270
  ROTATION_90 = Rotation90
  asInt()I = AsInt()
  fromInt(I)Ljp/co/cyberagent/android/gpuimage/Rotation; = FromInt(int)
  valueOf(Ljava/lang/String;)Ljp/co/cyberagent/android/gpuimage/Rotation; = ValueOf(string)
  values()[Ljp/co/cyberagent/android/gpuimage/Rotation; = Values()
jp/co/cyberagent/android/gpuimage/util/TextureRotationUtil = JP.CO.Cyberagent.Android.Gpuimage.Util.TextureRotationUtil
  TEXTURE_NO_ROTATION = TextureNoRotation
  TEXTURE_ROTATED_180 = TextureRotated180
  TEXTURE_ROTATED_270 = TextureRotated270
  TEXTURE_ROTATED_90 = TextureRotated90
  getRotation(Ljp/co/cyberagent/android/gpuimage/Rotation;ZZ)[F = GetRotation(JP.CO.Cyberagent.Android.Gpuimage.Rotation, bool, bool)
